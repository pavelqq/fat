{"version":3,"sources":["views/ProjectList/components/Header/Header.js","views/ProjectList/components/Filter/components/MultiSelect/MultiSelect.js","views/ProjectList/components/Filter/Filter.js","components/Paginate/Paginate.js","views/ProjectList/components/Results/Results.js","views/ProjectList/ProjectList.js"],"names":["useStyles","makeStyles","theme","root","addIcon","marginRight","spacing","addButton","backgroundColor","colors","deepOrange","red","Header","props","className","rest","classes","clsx","Grid","alignItems","container","justify","item","Typography","component","gutterBottom","variant","Button","color","RouterLink","to","menuItem","padding","formControlLabel","width","margin","keywords","display","searchIcon","palette","icon","chips","flexWrap","chip","selects","grey","inNetwork","marginLeft","submit","black","orange","typography","button","listStyle","userSelect","active","activeLink","break","breakLink","disabled","next","nextLink","outline","cursor","borderRadius","blueGrey","page","pageLink","text","secondary","height","textAlign","primary","previous","previousLink","Paginate","pageCount","onPageChange","pageRangeDisplayed","activeClassName","activeLinkClassName","breakClassName","breakLabel","breakLinkClassName","containerClassName","disabledClassName","marginPagesDisplayed","nextClassName","nextLabel","nextLinkClassName","pageClassName","pageLinkClassName","previousClassName","previousLabel","previousLinkClassName","subContainerClassName","header","justifyContent","marginBottom","title","position","bottom","left","content","main","actions","sortButton","textTransform","letterSpacing","paginate","marginTop","Projects","projects","sortRef","useRef","useState","openSort","setOpenSort","selectedSort","setSelectedSort","mode","setMode","length","onClick","ref","ToggleButtonGroup","exclusive","onChange","event","value","size","ToggleButton","map","project","md","sm","xs","ProjectCard","_id","id","Menu","anchorEl","current","menu","onClose","open","option","MenuItem","ListItemText","breakpoints","values","lg","maxWidth","filter","results","disabledInput","paddingRight","paddingLeft","fakeSubmit","ProjectList","history","dispatch","useDispatch","useEffect","getAllProjects","useSelector","state","projectsList","appState","console","log","auth","push","setChips","setValue","onChangeHandler","target","filterByTitles","checkedTags","checkedDifficult","checkedTitle","checkedAuthor","searchVariant","setSearchVariant","handleChangeSearch","key","name","checked","Page","Card","Input","disableUnderline","placeholder","type","Divider","Chip","deleteIcon","label","onDelete","c","handleChipDelete","FormGroup","row","FormControlLabel","control","Switch","Results"],"mappings":"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","file":"static/js/22.961bdb00.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Typography, Grid, Button, colors} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    addIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    addButton: {\r\n        backgroundColor: colors.deepOrange[300],\r\n        '&:hover': {\r\n            backgroundColor: colors.red[300]\r\n        }\r\n    }\r\n}));\r\n\r\nconst Header = props => {\r\n    const {className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <Grid\r\n                alignItems=\"flex-end\"\r\n                container\r\n                justify=\"space-between\"\r\n                spacing={3}\r\n            >\r\n                <Grid item>\r\n                    <Typography\r\n                        component=\"h2\"\r\n                        gutterBottom\r\n                        variant=\"overline\"\r\n                    >\r\n                        Проекты\r\n                    </Typography>\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h3\"\r\n                    >\r\n                        Поиск проектов\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to=\"/projects/create\"\r\n                        variant=\"contained\"\r\n                        className={classes.addButton}\r\n                    >\r\n                        <AddIcon className={classes.addIcon}/>\r\n                        Создать новый проект\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Header;\r\n","import React, { Fragment, useState, useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Menu,\r\n  MenuItem\r\n} from '@material-ui/core';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {},\r\n  menuItem: {\r\n    padding: 0\r\n  },\r\n  formControlLabel: {\r\n    padding: theme.spacing(0.5, 2),\r\n    width: '100%',\r\n    margin: 0\r\n  }\r\n}));\r\n\r\nconst MultiSelect = props => {\r\n  const { label, options, value, onChange } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  const anchorRef = useRef(null);\r\n\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n\r\n  const handleMenuOpen = () => {\r\n    setOpenMenu(true);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setOpenMenu(false);\r\n  };\r\n\r\n  const handleOptionToggle = event => {\r\n    let newValue = [...value];\r\n\r\n    if (event.target.checked) {\r\n      newValue.push(event.target.value);\r\n    } else {\r\n      newValue = newValue.filter(item => item !== event.target.value);\r\n    }\r\n\r\n    onChange && onChange(newValue);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        onClick={handleMenuOpen}\r\n        ref={anchorRef}\r\n      >\r\n        {label}\r\n        <ArrowDropDownIcon />\r\n      </Button>\r\n      <Menu\r\n        anchorEl={anchorRef.current}\r\n        className={classes.menu}\r\n        onClose={handleMenuClose}\r\n        open={openMenu}\r\n        PaperProps={{ style: { width: 250 } }}\r\n      >\r\n        {options.map(option => (\r\n          <MenuItem\r\n            className={classes.menuItem}\r\n            key={option}\r\n          >\r\n            <FormControlLabel\r\n              className={classes.formControlLabel}\r\n              control={\r\n                <Checkbox\r\n                  checked={value.indexOf(option) > -1}\r\n                  color=\"primary\"\r\n                  onClick={handleOptionToggle}\r\n                  value={option}\r\n                />\r\n              }\r\n              label={option}\r\n            />\r\n          </MenuItem>\r\n        ))}\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\n\r\nexport default MultiSelect;\r\n","import React, {useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Checkbox,\r\n    Chip,\r\n    Divider,\r\n    FormControlLabel,\r\n    Input,\r\n    Card,\r\n    colors, Button\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport {MultiSelect} from './components';\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    keywords: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    searchIcon: {\r\n        color: theme.palette.icon,\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    chips: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    selects: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexWrap: 'wrap',\r\n        backgroundColor: colors.grey[50],\r\n        padding: theme.spacing(1)\r\n    },\r\n    inNetwork: {\r\n        marginLeft: 'auto'\r\n    },\r\n    submit: {\r\n        width: 150,\r\n        marginLeft: 'auto',\r\n        color: theme.palette.black,\r\n        backgroundColor: colors.orange[300],\r\n        '&:hover': {\r\n            backgroundColor: colors.deepOrange[600]\r\n        }\r\n    }\r\n}));\r\n\r\nconst selects = [\r\n    {\r\n        label: 'Тип проекта',\r\n        options: ['Тренировочный план', 'Диета']\r\n    },\r\n    {\r\n        label: 'Уровень сложности',\r\n        options: ['1', '2', '3', '4']\r\n    },\r\n    {\r\n        label: 'Состояние здоровья',\r\n        options: ['Со здоровьем все ОК!', 'Не очень']\r\n    },\r\n];\r\n\r\nconst Filter = props => {\r\n    const {className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [chips, setChips] = useState([\r\n        'Тренировочный план',\r\n        'Диета',\r\n    ]);\r\n\r\n    const handleInputChange = event => {\r\n        event.persist();\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const handleInputKeyup = event => {\r\n        event.persist();\r\n\r\n        if (event.keyCode === 13 && inputValue) {\r\n            if (!chips.includes(inputValue)) {\r\n                setChips(chips => [...chips, inputValue]);\r\n                setInputValue('');\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleChipDelete = chip => {\r\n        setChips(chips => chips.filter(c => chip !== c));\r\n    };\r\n\r\n    const handleMultiSelectChange = value => {\r\n        setChips(value);\r\n    };\r\n\r\n    const handleSliderSelect = value => {\r\n        return `${value}`;\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <div className={classes.keywords}>\r\n                <SearchIcon className={classes.searchIcon}/>\r\n                <Input\r\n                    disableUnderline\r\n                    onChange={handleInputChange}\r\n                    onKeyUp={handleInputKeyup}\r\n                    placeholder=\"Введите теги для поиска\"\r\n                    value={inputValue}\r\n                />\r\n            </div>\r\n            <Divider/>\r\n            <div className={classes.chips}>\r\n                {chips.map(chip => (\r\n                    <Chip\r\n                        className={classes.chip}\r\n                        deleteIcon={<CloseIcon/>}\r\n                        key={chip}\r\n                        label={chip}\r\n                        onDelete={() => handleChipDelete(chip)}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <Divider/>\r\n            <div className={classes.selects}>\r\n                {selects.map(select => (\r\n                    <MultiSelect\r\n                        key={select.label}\r\n                        label={select.label}\r\n                        onChange={handleMultiSelectChange}\r\n                        options={select.options}\r\n                        value={chips}\r\n                    />\r\n                ))}\r\n                {/*<FormControlLabel*/}\r\n                {/*    className={classes.inNetwork}*/}\r\n                {/*    control={*/}\r\n                {/*        <Checkbox*/}\r\n                {/*            color=\"primary\"*/}\r\n                {/*        />*/}\r\n                {/*    }*/}\r\n                {/*    label=\"Включить приватные проекты в поиск\"*/}\r\n                {/*/>*/}\r\n                <Button type=\"submit\" className={classes.submit} variant=\"outlined\">\r\n                    Поиск\r\n                </Button>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {colors} from '@material-ui/core';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        ...theme.typography.button,\r\n        listStyle: 'none',\r\n        userSelect: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    active: {},\r\n    activeLink: {},\r\n    break: {},\r\n    breakLink: {},\r\n    disabled: {},\r\n    next: {\r\n        marginLeft: theme.spacing(1)\r\n    },\r\n    nextLink: {\r\n        padding: '6px 16px',\r\n        outline: 'none',\r\n        cursor: 'pointer',\r\n        borderRadius: 4,\r\n        '&:hover': {\r\n            backgroundColor: colors.blueGrey[50]\r\n        }\r\n    },\r\n    page: {},\r\n    pageLink: {\r\n        color: theme.palette.text.secondary,\r\n        padding: theme.spacing(1),\r\n        outline: 'none',\r\n        cursor: 'pointer',\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: '50%',\r\n        display: 'block',\r\n        textAlign: 'center',\r\n        '&:hover': {\r\n            backgroundColor: colors.blueGrey[50],\r\n            color: theme.palette.text.primary\r\n        },\r\n        '&$activeLink': {\r\n            backgroundColor: colors.blueGrey[50],\r\n            color: theme.palette.text.primary\r\n        }\r\n    },\r\n    previous: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    previousLink: {\r\n        padding: '6px 16px',\r\n        outline: 'none',\r\n        cursor: 'pointer',\r\n        borderRadius: 4,\r\n        '&:hover': {\r\n            backgroundColor: colors.blueGrey[50]\r\n        }\r\n    }\r\n}));\r\n\r\nconst Paginate = props => {\r\n    const {\r\n        pageCount,\r\n        pageRangeDisplayed,\r\n        onPageChange,\r\n        className,\r\n        ...rest\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <ReactPaginate\r\n            activeClassName={classes.active}\r\n            activeLinkClassName={classes.activeLink}\r\n            breakClassName={classes.break}\r\n            breakLabel=\"...\"\r\n            breakLinkClassName={classes.breakLink}\r\n            containerClassName={clsx(classes.root, className)}\r\n            disabledClassName={classes.disabled}\r\n            marginPagesDisplayed={2}\r\n            nextClassName={classes.next}\r\n            nextLabel=\"Далее\"\r\n            nextLinkClassName={classes.nextLink}\r\n            onPageChange={onPageChange}\r\n            pageClassName={classes.page}\r\n            pageCount={pageCount}\r\n            pageLinkClassName={classes.pageLink}\r\n            pageRangeDisplayed={5}\r\n            previousClassName={classes.previous}\r\n            previousLabel=\"Назад\"\r\n            previousLinkClassName={classes.previousLink}\r\n            subContainerClassName=\"страниц\"\r\n            {...rest}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Paginate;\r\n","import React, {useState, useRef, useEffect} from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Menu,\r\n    MenuItem,\r\n    ListItemText,\r\n    Typography, colors\r\n} from '@material-ui/core';\r\nimport {ToggleButtonGroup, ToggleButton} from '@material-ui/lab';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport axios from \"../../../../utils/axios\";\r\nimport Paginate from \"../../../../components/Paginate\";\r\nimport ProjectCard from \"../../../../components/ProjectCard\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAllProjects, getProjects} from \"../../../../store/actions/projectActions\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        flexWrap: 'wrap',\r\n        marginBottom: theme.spacing(2)\r\n    },\r\n    title: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            position: 'absolute',\r\n            bottom: -8,\r\n            left: 0,\r\n            content: '\" \"',\r\n            height: 3,\r\n            width: 48,\r\n            backgroundColor: theme.palette.primary.main\r\n        }\r\n    },\r\n    actions: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    sortButton: {\r\n        textTransform: 'none',\r\n        letterSpacing: 0,\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    paginate: {\r\n        marginTop: theme.spacing(3),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\nconst Projects = props => {\r\n    const {projects, className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n    const sortRef = useRef(null);\r\n    const [openSort, setOpenSort] = useState(false);\r\n    const [selectedSort, setSelectedSort] = useState('Популярное');\r\n    const [mode, setMode] = useState('grid');\r\n\r\n    const handleSortOpen = () => {\r\n        setOpenSort(true);\r\n    };\r\n\r\n    const handleSortClose = () => {\r\n        setOpenSort(false);\r\n    };\r\n\r\n    const handleSortSelect = value => {\r\n        setSelectedSort(value);\r\n        setOpenSort(false);\r\n    };\r\n\r\n    const handleModeChange = (event, value) => {\r\n        setMode(value);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <div className={classes.header}>\r\n                <Typography\r\n                    className={classes.title}\r\n                    variant=\"h5\"\r\n                >\r\n                    Показано {projects.length} проектов\r\n                </Typography>\r\n                <div className={classes.actions}>\r\n                    <Button\r\n                        className={classes.sortButton}\r\n                        onClick={handleSortOpen}\r\n                        ref={sortRef}\r\n                    >\r\n                        {selectedSort}\r\n                        <ArrowDropDownIcon/>\r\n                    </Button>\r\n                    <ToggleButtonGroup\r\n                        exclusive\r\n                        onChange={handleModeChange}\r\n                        size=\"small\"\r\n                        value={mode}\r\n                    >\r\n                        <ToggleButton value=\"grid\">\r\n                            <ViewModuleIcon/>\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n            </div>\r\n            <Grid\r\n                container\r\n                spacing={3}\r\n            >\r\n                {projects.length > 0 && projects.map(project => (\r\n                    <Grid\r\n                        item\r\n                        key={project.id}\r\n                        md={mode === 'grid' ? 4 : 12}\r\n                        sm={mode === 'grid' ? 6 : 12}\r\n                        xs={12}\r\n                    >\r\n                        <ProjectCard\r\n                            key={project._id}\r\n                            project={project}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            {projects.length > 6 &&\r\n                <div className={classes.paginate}>\r\n                    <Paginate pageCount={3}/>\r\n                </div>\r\n            }\r\n            <Menu\r\n                anchorEl={sortRef.current}\r\n                className={classes.menu}\r\n                onClose={handleSortClose}\r\n                open={openSort}\r\n            >\r\n                {['Популярное', 'Сначала из новых', 'Сначала из старых'].map(\r\n                    option => (\r\n                        <MenuItem\r\n                            key={option}\r\n                            onClick={() => handleSortSelect(option)}\r\n                        >\r\n                            <ListItemText primary={option}/>\r\n                        </MenuItem>\r\n                    )\r\n                )}\r\n            </Menu>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Projects;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport Page from \"../../components/Page\";\r\nimport {Header, Filter, Results} from './components';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAllProjects} from \"../../store/actions/projectActions\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport {Button, Card, Chip, colors, Divider, FormControlLabel, FormGroup, Input, Switch} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\r\nimport WhatshotIcon from \"@material-ui/icons/Whatshot\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: theme.breakpoints.values.lg,\r\n        maxWidth: '100%',\r\n        margin: '0 auto',\r\n        padding: theme.spacing(3)\r\n    },\r\n    header: {\r\n        marginBottom: theme.spacing(3)\r\n    },\r\n    filter: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    results: {\r\n        marginTop: theme.spacing(6)\r\n    },\r\n    keywords: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    disabledInput: {},\r\n    searchIcon: {\r\n        color: theme.palette.icon,\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    chips: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    selects: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexWrap: 'wrap',\r\n        backgroundColor: colors.grey[50],\r\n        padding: theme.spacing(1),\r\n        paddingRight: theme.spacing(2),\r\n        paddingLeft: theme.spacing(2),\r\n    },\r\n    inNetwork: {\r\n        marginLeft: 'auto'\r\n    },\r\n    submit: {\r\n        width: 150,\r\n        marginLeft: 'auto',\r\n        color: theme.palette.black,\r\n        backgroundColor: colors.orange[300],\r\n        '&:hover': {\r\n            backgroundColor: colors.deepOrange[600]\r\n        }\r\n    },\r\n    fakeSubmit: {\r\n        width: 150,\r\n        marginLeft: 'auto',\r\n        backgroundColor: colors.grey[300],\r\n    }\r\n}));\r\n\r\n// const selects = [\r\n//     {\r\n//         label: 'Тип проекта',\r\n//         options: ['Тренировочный план', 'Диета']\r\n//     },\r\n//     {\r\n//         label: 'Уровень сложности',\r\n//         options: ['1', '2', '3', '4']\r\n//     },\r\n//     {\r\n//         label: 'Состояние здоровья',\r\n//         options: ['Со здоровьем все ОК!', 'Не очень']\r\n//     },\r\n// ];\r\n\r\n\r\n// function FormControlLabel(props) {\r\n//     return null;\r\n// }\r\n//\r\n// FormControlLabel.propTypes = {\r\n//     label: PropTypes.string,\r\n//     control: PropTypes.element\r\n// };\r\nconst ProjectList = props => {\r\n    const {history} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllProjects())\r\n    }, [dispatch])\r\n\r\n    const projects = useSelector(state => state.projectsList)\r\n\r\n    const appState = useSelector((state) => state);\r\n    console.log(appState);\r\n\r\n    const auth = useSelector(state => state.auth)\r\n    if (!auth._id) (\r\n        history.push('/')\r\n    )\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const [chips, setChips] = useState([\r\n        'Тренировочный план',\r\n        'Диета',\r\n        'Саня',\r\n        'Ирина',\r\n        '-10кг'\r\n    ]);\r\n\r\n    const handleInputChange = event => {\r\n        event.persist();\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const handleInputKeyup = event => {\r\n        event.persist();\r\n\r\n        if (event.keyCode === 13 && inputValue) {\r\n            if (!chips.includes(inputValue)) {\r\n                setChips(chips => [...chips, inputValue]);\r\n                setInputValue('');\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleChipDelete = chip => {\r\n        setChips(chips => chips.filter(c => chip !== c));\r\n    };\r\n\r\n    const handleMultiSelectChange = value => {\r\n        setChips(value);\r\n    };\r\n\r\n    //поиск по названию\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    const onChangeHandler = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    const filterByTitles = (projects, current) => {\r\n        return projects.filter((project) => project.title === current);\r\n    }\r\n    const results = !value ? projects : filterByTitles(projects, value);\r\n\r\n    // const filterByNames = (projects, current) => {\r\n    //     return projects.filter((project) => project.name === current);\r\n    // }\r\n    // const results = !value ? projects : filterByTitles(projects, value);\r\n\r\n    //варианты поиска\r\n    const [searchVariant, setSearchVariant] = useState({\r\n        checkedTags: false,\r\n        checkedDifficult: false,\r\n        checkedTitle: true,\r\n        checkedAuthor: false,\r\n    });\r\n    const handleChangeSearch = (event) => {\r\n        for (let key in searchVariant) {\r\n            searchVariant[key] = false;\r\n        }\r\n        setSearchVariant({...searchVariant, [event.target.name]: event.target.checked});\r\n    };\r\n\r\n    return (\r\n        <Page\r\n            className={classes.root}\r\n            title=\"Список проектов\"\r\n        >\r\n            <Header className={classes.header}/>\r\n            <Card className={classes.filter}>\r\n                <div className={classes.keywords}>\r\n                    {(  !searchVariant.checkedTags\r\n                        && !searchVariant.checkedDifficult\r\n                        && !searchVariant.checkedTitle\r\n                        && !searchVariant.checkedAuthor\r\n                    ) && (\r\n                        <>\r\n                            <CancelIcon className={classes.searchIcon}/>\r\n                            <Input\r\n                                className={classes.disabledInput}\r\n                                disabled\r\n                                disableUnderline\r\n                                placeholder={`Выберете метод поиска`}\r\n                                value={value}\r\n                            />\r\n                        </>\r\n                    )}\r\n                    {(  searchVariant.checkedTags\r\n                        && !searchVariant.checkedDifficult\r\n                        && !searchVariant.checkedTitle\r\n                        && !searchVariant.checkedAuthor\r\n                    ) && (\r\n                        <>\r\n                            <TextFieldsIcon className={classes.searchIcon}/>\r\n                            <Input\r\n                                disableUnderline\r\n                                onChange={onChangeHandler}\r\n                                placeholder={`Введите теги`}\r\n                                value={value}\r\n                            />\r\n                            <Button className={classes.submit} variant=\"outlined\">\r\n                                Добавить\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                    {(  !searchVariant.checkedTags\r\n                        && searchVariant.checkedDifficult\r\n                        && !searchVariant.checkedTitle\r\n                        && !searchVariant.checkedAuthor\r\n                    ) && (\r\n                        <>\r\n                            <WhatshotIcon className={classes.searchIcon}/>\r\n                            <Input\r\n                                disableUnderline\r\n                                type=\"number\"\r\n                                onChange={onChangeHandler}\r\n                                placeholder={`Число от 1 до 10`}\r\n                                value={value}\r\n                            />\r\n                        </>\r\n                    )}\r\n                    {(  !searchVariant.checkedTags\r\n                        && !searchVariant.checkedDifficult\r\n                        && searchVariant.checkedTitle\r\n                        && !searchVariant.checkedAuthor\r\n                    ) && (\r\n                        <>\r\n                            <SearchIcon className={classes.searchIcon}/>\r\n                            <Input\r\n                                disableUnderline\r\n                                onChange={onChangeHandler}\r\n                                placeholder={`Введите название`}\r\n                                value={value}\r\n                            />\r\n                        </>\r\n                    )}\r\n                    {(  !searchVariant.checkedTags\r\n                        && !searchVariant.checkedDifficult\r\n                        && !searchVariant.checkedTitle\r\n                        && searchVariant.checkedAuthor\r\n                    ) && (\r\n                        <>\r\n                            <FaceIcon className={classes.searchIcon}/>\r\n                            <Input\r\n                                disableUnderline\r\n                                disabled\r\n                                onChange={onChangeHandler}\r\n                                placeholder={`Введите имя автора`}\r\n                                value={value}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <Divider/>\r\n                {searchVariant.checkedTags && (\r\n                    <>\r\n                        <div className={classes.chips}>\r\n                            {chips.map(chip => (\r\n                                <Chip\r\n                                    className={classes.chip}\r\n                                    deleteIcon={<CloseIcon/>}\r\n                                    key={chip}\r\n                                    label={chip}\r\n                                    onDelete={() => handleChipDelete(chip)}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                        <Divider/>\r\n                    </>\r\n                )}\r\n                <div className={classes.selects}>\r\n                    <FormGroup row>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={searchVariant.checkedTags}\r\n                                    onChange={handleChangeSearch}\r\n                                    name=\"checkedTags\"\r\n                                    color=\"secondary\"\r\n                                />}\r\n                            label=\"Поиск по тегам\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={searchVariant.checkedDifficult}\r\n                                    onChange={handleChangeSearch}\r\n                                    name=\"checkedDifficult\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Поиск по сложности\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={searchVariant.checkedTitle}\r\n                                    onChange={handleChangeSearch}\r\n                                    name=\"checkedTitle\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Поиск по названию\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={searchVariant.checkedAuthor}\r\n                                    onChange={handleChangeSearch}\r\n                                    name=\"checkedAuthor\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Поиск по авторам\"\r\n                        />\r\n                    </FormGroup>\r\n                    {/*{selects.map(select => (*/}\r\n                    {/*    <MultiSelect*/}\r\n                    {/*        key={select.label}*/}\r\n                    {/*        label={select.label}*/}\r\n                    {/*        onChange={handleMultiSelectChange}*/}\r\n                    {/*        options={select.options}*/}\r\n                    {/*        value={chips}*/}\r\n                    {/*    />*/}\r\n                    {/*))}*/}\r\n                    {/*<FormControlLabel*/}\r\n                    {/*    className={classes.inNetwork}*/}\r\n                    {/*    control={*/}\r\n                    {/*        <Checkbox*/}\r\n                    {/*            color=\"primary\"*/}\r\n                    {/*        />*/}\r\n                    {/*    }*/}\r\n                    {/*    label=\"Включить приватные проекты в поиск\"*/}\r\n                    {/*/>*/}\r\n                    {\r\n                        (   !searchVariant.checkedTags\r\n                            && !searchVariant.checkedDifficult\r\n                            && !searchVariant.checkedTitle\r\n                            && !searchVariant.checkedAuthor\r\n                        ) ? (\r\n                            <Button disabled className={classes.fakeSubmit} variant=\"outlined\">\r\n                                Поиск\r\n                            </Button>\r\n                        ) : (\r\n                            <Button type=\"submit\" className={classes.submit} variant=\"outlined\">\r\n                                Поиск\r\n                            </Button>\r\n                        )\r\n                    }\r\n                </div>\r\n            </Card>\r\n            <Results className={classes.results} projects={results}/>\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default ProjectList;\r\n"],"sourceRoot":""}