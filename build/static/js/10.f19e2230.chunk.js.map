{"version":3,"sources":["views/Chat/components/ConversationList/components/ConversationListItem/ConversationListItem.js","views/Chat/components/ConversationList/ConversationList.js","views/Chat/components/ConversationDetails/components/ConversationToolbar/ConversationToolbar.js","views/Chat/components/ConversationDetails/components/ConversationMessage/ConversationMessage.js","views/Chat/components/ConversationDetails/components/ConversationMessages/ConversationMessages.js","views/Chat/components/ConversationDetails/components/ConversationForm/ConversationForm.js","store/actions/messageActions.js","views/Chat/components/ConversationDetails/ConversationDetails.js","views/Chat/components/ConversationPlaceholder/ConversationPlaceholder.js","views/Chat/Chat.js","store/actions/conversationActions.js"],"names":["useStyles","makeStyles","theme","active","boxShadow","palette","primary","main","backgroundColor","colors","grey","avatar","height","width","details","marginLeft","spacing","display","flexDirection","alignItems","unread","marginTop","padding","minWidth","ConversationListItem","props","conversation","className","rest","classes","authId","useSelector","state","auth","_id","selectedConversation","firstUser","uid","secondUser","ListItem","button","clsx","component","RouterLink","to","conversationId","ListItemAvatar","Avatar","alt","src","profilePicture","ListItemText","name","primaryTypographyProps","noWrap","variant","secondary","secondaryTypographyProps","Typography","root","white","searchInput","flexGrow","ConversationList","conversations","useRouter","match","params","id","Toolbar","Input","disableUnderline","placeholder","Tooltip","title","IconButton","edge","Divider","List","disablePadding","map","i","divider","length","backButton","marginRight","user","flexShrink","activity","statusBullet","search","flexBasis","breakpoints","down","flex","searchIcon","color","icon","ConversationToolbar","moreRef","useRef","useState","openMenu","setOpenMenu","Paper","elevation","onClick","ref","Menu","anchorEl","current","keepMounted","onClose","open","MenuItem","ListItemIcon","marginBottom","authUser","justifyContent","background","blueGrey","inner","maxWidth","body","text","borderRadius","shape","content","image","footer","ConversationMessage","message","sender","Link","contentType","time","moment","date","fromNow","overflow","maxHeight","ConversationMessages","messages","paper","input","fileInput","form","ConversationForm","cId","uuidv4","setMessage","dispatch","useDispatch","noValidate","onSubmit","e","persist","newMessage","Date","getState","axios","post","url","setHeaders","then","type","catch","error","console","log","response","toast","data","position","POSITION","BOTTOM_RIGHT","addMessage","value","onChange","target","ConversationDetails","textAlign","margin","ConversationPlaceholder","transform","openConversion","conversationList","borderRight","conversationDetails","conversationPlaceholder","Chat","history","router","useEffect","getUsersConversations","conversationsList","get","messagesList","selectedConversationMessages","appState","push","find","c","filter","m","Page","currentUserId","addConversation","newConversation"],"mappings":"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","file":"static/js/10.f19e2230.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Typography,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Avatar,\r\n    colors\r\n} from '@material-ui/core';\r\n\r\nimport Label from \"../../../../../../components/Label\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    active: {\r\n        boxShadow: `inset 4px 0px 0px ${theme.palette.primary.main}`,\r\n        backgroundColor: colors.grey[50]\r\n    },\r\n    avatar: {\r\n        height: 40,\r\n        width: 40\r\n    },\r\n    details: {\r\n        marginLeft: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-end'\r\n    },\r\n    unread: {\r\n        marginTop: 2,\r\n        padding: 2,\r\n        height: 18,\r\n        minWidth: 18\r\n    }\r\n}));\r\n\r\nconst ConversationListItem = props => {\r\n    const {active, conversation, className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n    //const lastMessage = conversation.messages[conversation.messages.length - 1];\r\n\r\n    const authId = useSelector(state => state.auth._id);\r\n\r\n    let selectedConversation = {};\r\n    if(conversation.firstUser.uid === authId) {\r\n        selectedConversation = {...conversation.secondUser}\r\n    } else {\r\n        selectedConversation = {...conversation.firstUser}\r\n    }\r\n\r\n    return (\r\n        <ListItem\r\n            {...rest}\r\n            button\r\n            className={clsx(\r\n                {\r\n                    [classes.active]: active\r\n                },\r\n                className\r\n            )}\r\n            component={RouterLink}\r\n            to={`/chat/${conversation.conversationId}`}\r\n        >\r\n            <ListItemAvatar>\r\n                <Avatar\r\n                    alt=\"Ава\"\r\n                    className={classes.avatar}\r\n                    src={selectedConversation.profilePicture}\r\n                />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={selectedConversation.name}\r\n                primaryTypographyProps={{\r\n                    noWrap: true,\r\n                    variant: 'h6'\r\n                }}\r\n                //secondary={`${lastMessage.sender.name}: ${lastMessage.content}`}\r\n                secondary={`ID диалога: ${conversation.conversationId}`}\r\n                secondaryTypographyProps={{\r\n                    noWrap: true,\r\n                    variant: 'body1'\r\n                }}\r\n            />\r\n            <div className={classes.details}>\r\n                <Typography\r\n                    noWrap\r\n                    variant=\"body2\"\r\n                >\r\n                    {/*{moment(lastMessage.created_at).isSame(moment(), 'day')*/}\r\n                    {/*    ? moment(lastMessage.created_at).format('LT')*/}\r\n                    {/*    : moment(lastMessage.created_at).fromNow()}*/}\r\n                </Typography>\r\n                {/*{conversation.unread > 0 && (*/}\r\n                {/*    <Label*/}\r\n                {/*        className={classes.unread}*/}\r\n                {/*        color={colors.red[500]}*/}\r\n                {/*        shape=\"rounded\"*/}\r\n                {/*    >*/}\r\n                {/*        {conversation.unread}*/}\r\n                {/*    </Label>*/}\r\n                {/*)}*/}\r\n            </div>\r\n        </ListItem>\r\n    );\r\n};\r\n\r\n\r\nexport default ConversationListItem;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Toolbar,\r\n    Input,\r\n    IconButton,\r\n    Tooltip,\r\n    Divider,\r\n    List\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport useRouter from \"../../../../utils/useRouter\";\r\nimport {ConversationListItem} from './components';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: theme.palette.white\r\n    },\r\n    searchInput: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\nconst ConversationList = props => {\r\n    const {conversations, className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n    const router = useRouter();\r\n    const selectedConversation = router.match.params.id;\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <Toolbar>\r\n                <Input\r\n                    className={classes.searchInput}\r\n                    disableUnderline\r\n                    placeholder=\"Найти диалог\"\r\n                />\r\n                <Tooltip title=\"Поиск\">\r\n                    <IconButton edge=\"end\">\r\n                        <SearchIcon/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </Toolbar>\r\n            <Divider/>\r\n            <List disablePadding>\r\n                {conversations.map((conversation, i) => (\r\n                    <ConversationListItem\r\n                        active={conversation.id === selectedConversation}\r\n                        conversation={conversation}\r\n                        divider={i < conversations.length - 1}\r\n                        key={conversation.id}\r\n                    />\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ConversationList;\r\n","import React, {useRef, useState} from 'react';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    IconButton,\r\n    Input,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n    Paper,\r\n    Toolbar,\r\n    Tooltip,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport BlockIcon from '@material-ui/icons/Block';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\nimport ArchiveIcon from '@material-ui/icons/ArchiveOutlined';\r\nimport NotificationsOffIcon from '@material-ui/icons/NotificationsOffOutlined';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport StatusBullet from \"../../../../../../components/StatusBullet\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: theme.palette.white\r\n    },\r\n    backButton: {\r\n        marginRight: theme.spacing(2),\r\n        '@media (min-width: 864px)': {\r\n            display: 'none'\r\n        }\r\n    },\r\n    user: {\r\n        flexShrink: 0,\r\n        flexGrow: 1\r\n    },\r\n    activity: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    statusBullet: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    search: {\r\n        height: 42,\r\n        padding: theme.spacing(0, 2),\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexBasis: 300,\r\n        marginLeft: 'auto',\r\n        [theme.breakpoints.down('sm')]: {\r\n            flex: '1 1 auto'\r\n        }\r\n    },\r\n    searchIcon: {\r\n        marginRight: theme.spacing(2),\r\n        color: theme.palette.icon\r\n    },\r\n    searchInput: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\nconst ConversationToolbar = props => {\r\n    const {conversation, className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n    const moreRef = useRef(null);\r\n    const [openMenu, setOpenMenu] = useState(false);\r\n\r\n    const handleMenuOpen = () => {\r\n        setOpenMenu(true);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setOpenMenu(false);\r\n    };\r\n\r\n    const authId = useSelector(state => state.auth._id);\r\n\r\n    let selectedConversation = {};\r\n    if(conversation.firstUser.uid === authId) {\r\n        selectedConversation = {...conversation.secondUser}\r\n    } else {\r\n        selectedConversation = {...conversation.firstUser}\r\n    }\r\n\r\n    return (\r\n        <Toolbar\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <Tooltip title=\"Назад\">\r\n                <IconButton\r\n                    className={classes.backButton}\r\n                    component={RouterLink}\r\n                    edge=\"start\"\r\n                    to=\"/chat\"\r\n                >\r\n                    <KeyboardBackspaceIcon/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <div className={classes.user}>\r\n                <Typography variant=\"h6\">{selectedConversation.name}</Typography>\r\n                <Typography variant=\"body2\">ID диалога: {conversation.conversationId}</Typography>\r\n                {/*<div className={classes.activity}>*/}\r\n                {/*    {conversation.otherUser.active ? (*/}\r\n                {/*        <>*/}\r\n                {/*            <StatusBullet*/}\r\n                {/*                className={classes.statusBullet}*/}\r\n                {/*                color=\"success\"*/}\r\n                {/*                size=\"small\"*/}\r\n                {/*            />*/}\r\n                {/*            <Typography variant=\"body2\">Сейчас онлайн</Typography>*/}\r\n                {/*        </>*/}\r\n                {/*    ) : (*/}\r\n                {/*        <Typography variant=\"body2\">*/}\r\n                {/*            Active {moment(conversation.otherUser.lastActivity).fromNow()}*/}\r\n                {/*        </Typography>*/}\r\n                {/*    )}*/}\r\n                {/*</div>*/}\r\n            </div>\r\n            <Paper\r\n                className={classes.search}\r\n                elevation={1}\r\n            >\r\n                <SearchIcon className={classes.searchIcon}/>\r\n                <Input\r\n                    className={classes.searchInput}\r\n                    disableUnderline\r\n                    placeholder=\"Поиск по диалогу\"\r\n                />\r\n            </Paper>\r\n            <Tooltip title=\"Больше\">\r\n                <IconButton\r\n                    onClick={handleMenuOpen}\r\n                    ref={moreRef}\r\n                >\r\n                    <MoreIcon/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n                anchorEl={moreRef.current}\r\n                keepMounted\r\n                onClose={handleMenuClose}\r\n                open={openMenu}\r\n            >\r\n                <MenuItem>\r\n                    <ListItemIcon>\r\n                        <BlockIcon/>\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Заблокировать пользователя\"/>\r\n                </MenuItem>\r\n                <MenuItem>\r\n                    <ListItemIcon>\r\n                        <DeleteIcon/>\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Удалить сообщения\"/>\r\n                </MenuItem>\r\n                {/*<MenuItem>*/}\r\n                {/*  <ListItemIcon>*/}\r\n                {/*    <ArchiveIcon />*/}\r\n                {/*  </ListItemIcon>*/}\r\n                {/*  <ListItemText primary=\"Архивировать сообщения\" />*/}\r\n                {/*</MenuItem>*/}\r\n                <MenuItem>\r\n                    <ListItemIcon>\r\n                        <NotificationsOffIcon/>\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Отключить уведомления\"/>\r\n                </MenuItem>\r\n            </Menu>\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\n\r\nexport default ConversationToolbar;\r\n","import React from 'react';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Typography, Link, Avatar, colors} from '@material-ui/core';\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginBottom: theme.spacing(2)\r\n    },\r\n    authUser: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        '& $body': {\r\n            background: colors.blueGrey[100]\r\n        }\r\n    },\r\n    inner: {\r\n        display: 'flex',\r\n        maxWidth: 500\r\n    },\r\n    avatar: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    body: {\r\n        backgroundColor: colors.grey[200],\r\n        color: theme.palette.text.primary,\r\n        borderRadius: theme.shape.borderRadius,\r\n        padding: theme.spacing(1, 1.5)\r\n    },\r\n    content: {\r\n        marginTop: theme.spacing(0.3)\r\n    },\r\n    image: {\r\n        marginTop: theme.spacing(2),\r\n        height: 'auto',\r\n        width: 380,\r\n        maxWidth: '100%'\r\n    },\r\n    footer: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        justifyContent: 'flex-end'\r\n    }\r\n}));\r\n\r\nconst ConversationMessage = props => {\r\n    const {message, className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const authId = useSelector(state => state.auth._id);\r\n\r\n    const authUser = (uid, authId) => {\r\n        return uid === authId;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(\r\n                classes.root,\r\n                {\r\n                    [classes.authUser]: authUser(message.sender.uid, authId)\r\n                },\r\n                className\r\n            )}\r\n        >\r\n            <div className={classes.inner}>\r\n                <Avatar\r\n                    className={classes.avatar}\r\n                    component={RouterLink}\r\n                    src={message.sender.profilePicture}\r\n                    to={`/profile/${message.sender.uid}/wall`}\r\n                />\r\n                <div>\r\n                    <div className={classes.body}>\r\n                        <Typography variant=\"body2\" color=\"secondary\">\r\n                            <Link\r\n                                color=\"inherit\"\r\n                                component={RouterLink}\r\n                                to={`/profile/${message.sender.uid}/wall`}\r\n                                variant=\"h6\"\r\n                            >\r\n                                {authUser(message.sender.uid, authId) ? message.sender.name : message.sender.name}\r\n                            </Link>\r\n                        </Typography>\r\n                        <div className={classes.content}>\r\n                            {message.contentType === 'image' ? (\r\n                                <img\r\n                                    alt=\"Картинка\"\r\n                                    className={classes.image}\r\n                                    src={message.content}\r\n                                />\r\n                            ) : (\r\n                                <Typography\r\n                                    color=\"inherit\"\r\n                                    variant=\"subtitle1\"\r\n                                >\r\n                                    {message.content}\r\n                                </Typography>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.footer}>\r\n                        <Typography\r\n                            className={classes.time}\r\n                            variant=\"body2\"\r\n                        >\r\n                            {moment(message.date).fromNow()}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ConversationMessage;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport ConversationMessage from '../ConversationMessage';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        overflow: 'hidden',\r\n        maxHeight: '100%'\r\n    },\r\n    inner: {\r\n        padding: theme.spacing(2),\r\n    }\r\n}));\r\n\r\nconst ConversationMessages = props => {\r\n    const {messages, className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <PerfectScrollbar>\r\n                <div className={classes.inner}>\r\n                    {messages.map(message => {\r\n                        return (\r\n                            <ConversationMessage\r\n                                key={message.id}\r\n                                message={message}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </PerfectScrollbar>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ConversationMessages;\r\n","import React, {useRef, useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Avatar,\r\n    Divider,\r\n    IconButton,\r\n    Input,\r\n    Paper,\r\n    Tooltip\r\n} from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport AddPhotoIcon from '@material-ui/icons/AddPhotoAlternate';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {addMessage} from \"../../../../../../store/actions/messageActions\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: theme.palette.white,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(1, 2)\r\n    },\r\n    paper: {\r\n        flexGrow: 1,\r\n        marginLeft: theme.spacing(2),\r\n        padding: theme.spacing(0.5, 2)\r\n    },\r\n    input: {\r\n        width: '100%'\r\n    },\r\n    divider: {\r\n        width: 1,\r\n        height: 24\r\n    },\r\n    fileInput: {\r\n        display: 'none'\r\n    },\r\n    form: {\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nconst ConversationForm = props => {\r\n    let {className, authUser, cId, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    // const fileInputRef = useRef(null);\r\n\r\n    if (!cId) (\r\n        cId = uuidv4()\r\n    )\r\n\r\n    const [message, setMessage] = useState({\r\n        conversationId: cId,\r\n        content: '',\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.persist();\r\n\r\n        const newMessage = {\r\n            ...message,\r\n            date: new Date()\r\n        }\r\n\r\n        dispatch(addMessage(newMessage));\r\n        setMessage({ content: '' });\r\n    }\r\n\r\n    // const handleChange = event => {\r\n    //     event.persist();\r\n    //\r\n    //     setMessage(event.target.message);\r\n    // };\r\n\r\n    // const handleAttach = () => {\r\n    //     fileInputRef.current.click();\r\n    // };\r\n\r\n    return (\r\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <Avatar\r\n                alt=\"Person\"\r\n                src={authUser.profilePicture}\r\n            />\r\n            <Paper\r\n                className={classes.paper}\r\n                elevation={1}\r\n            >\r\n                <Input\r\n                    className={classes.input}\r\n                    disableUnderline\r\n                    // onChange={handleChange}\r\n                    placeholder=\"Напишите что-нибудь...\"\r\n                    value={message.content}\r\n                    onChange={(e) => setMessage({\r\n                        ...message, content: e.target.value,\r\n                    })}\r\n                />\r\n            </Paper>\r\n            <Tooltip\r\n                title=\"Отправить\"\r\n                type=\"submit\"\r\n            >\r\n                <IconButton color='primary'>\r\n                    <SendIcon/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Divider className={classes.divider}/>\r\n            {/*<Tooltip title=\"Сохранить фото\">*/}\r\n            {/*    <IconButton*/}\r\n            {/*        edge=\"end\"*/}\r\n            {/*        onClick={handleAttach}*/}\r\n            {/*    >*/}\r\n            {/*        <AddPhotoIcon/>*/}\r\n            {/*    </IconButton>*/}\r\n            {/*</Tooltip>*/}\r\n            {/*<Tooltip title=\"Загрузить файл\">*/}\r\n            {/*    <IconButton*/}\r\n            {/*        edge=\"end\"*/}\r\n            {/*        onClick={handleAttach}*/}\r\n            {/*    >*/}\r\n            {/*        <AttachFileIcon/>*/}\r\n            {/*    </IconButton>*/}\r\n            {/*</Tooltip>*/}\r\n            {/*<input*/}\r\n            {/*    className={classes.fileInput}*/}\r\n            {/*    ref={fileInputRef}*/}\r\n            {/*    type=\"file\"*/}\r\n            {/*/>*/}\r\n        </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nexport default ConversationForm;\r\n","import axios from \"axios\";\r\nimport {url, setHeaders} from \"../../api\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nexport const getConversationMessages = (conversationId) => {\r\n    return (dispatch) => {\r\n        axios\r\n            .get(`${url}/messages/${conversationId}`, setHeaders())\r\n            .then((messagesList) => {\r\n                dispatch({\r\n                    type: \"CLEAR_MESSAGES\"\r\n                })\r\n                dispatch({\r\n                    type: \"GET_MESSAGES\",\r\n                    messagesList,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n};\r\n\r\nexport const addMessage = (newMessage) => {\r\n    return (dispatch, getState) => {\r\n        const uid = getState().auth._id;\r\n        const name = getState().auth.name;\r\n        const profilePicture = getState().auth.profilePicture;\r\n        axios\r\n            .post(`${url}/messages`, {...newMessage, sender:{uid,name,profilePicture}}, setHeaders())\r\n            .then((conversation) => {\r\n                dispatch({\r\n                    type: \"ADD_MESSAGE\",\r\n                    conversation,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error.response);\r\n\r\n                toast.error(error.response?.data, {\r\n                    position: toast.POSITION.BOTTOM_RIGHT,\r\n                });\r\n            });\r\n    };\r\n};\r\n\r\nexport const deleteMessage = (_id) => {\r\n    return (dispatch) => {\r\n        axios\r\n            .delete(`${url}/messages/${_id}`, setHeaders())\r\n            .then(() => {\r\n                dispatch({\r\n                    type: \"DELETE_MESSAGE\",\r\n                    _id,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                toast.error(error.response?.data, {\r\n                    position: toast.POSITION.BOTTOM_RIGHT,\r\n                });\r\n            });\r\n    };\r\n};\r\n\r\n// export const getProjectById = (projectId) => {\r\n//     return (dispatch) => {\r\n//         axios\r\n//             .get(`${url}/projects/current/${projectId}`, setProjectHeaders())\r\n//             .then((projectById) => {\r\n//                 dispatch({\r\n//                     type: \"GET_PROJECT_BY_ID\",\r\n//                     projectById,\r\n//                 });\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.log(error);\r\n//             });\r\n//     };\r\n// };","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Divider} from '@material-ui/core';\r\n\r\nimport {\r\n    ConversationToolbar,\r\n    ConversationMessages,\r\n    ConversationForm\r\n} from './components';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: theme.palette.white\r\n    }\r\n}));\r\n\r\nconst ConversationDetails = props => {\r\n    const {conversation, authUser, messages, className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <ConversationToolbar conversation={conversation}/>\r\n            <Divider/>\r\n            <ConversationMessages messages={messages}/>\r\n            <Divider/>\r\n            <ConversationForm cId={conversation.conversationId} authUser={authUser}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ConversationDetails;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Typography} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    inner: {\r\n        textAlign: 'center'\r\n    },\r\n    image: {\r\n        maxWidth: 400\r\n    },\r\n    title: {\r\n        margin: theme.spacing(4, 0, 1, 0)\r\n    }\r\n}));\r\n\r\nconst ConversationPlaceholder = props => {\r\n    const {className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <div className={classes.inner}>\r\n                <Typography variant=\"subtitle1\">\r\n                    Выберете диалог слева, чтобы начать переписку\r\n                </Typography>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ConversationPlaceholder;\r\n","import React, {useState, useEffect} from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport axios from \"../../utils/axios\";\r\nimport useRouter from \"../../utils/useRouter\"\r\nimport Page from \"../../components/Page\";\r\nimport {\r\n    ConversationList,\r\n    ConversationDetails,\r\n    ConversationPlaceholder\r\n} from './components';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUsersConversations} from \"../../store/actions/conversationActions\";\r\nimport {getConversationMessages} from \"../../store/actions/messageActions\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        '@media (max-width: 863px)': {\r\n            '& $conversationList, & $conversationDetails': {\r\n                flexBasis: '100%',\r\n                width: '100%',\r\n                maxWidth: 'none',\r\n                flexShrink: '0',\r\n                transform: 'translateX(0)'\r\n            }\r\n        }\r\n    },\r\n    openConversion: {\r\n        '@media (max-width: 863px)': {\r\n            '& $conversationList, & $conversationDetails': {\r\n                transform: 'translateX(-100%)'\r\n            }\r\n        }\r\n    },\r\n    conversationList: {\r\n        width: 300,\r\n        flexBasis: 300,\r\n        flexShrink: 0,\r\n        '@media (min-width: 864px)': {\r\n            borderRight: `1px solid ${theme.palette.divider}`\r\n        }\r\n    },\r\n    conversationDetails: {\r\n        flexGrow: 1\r\n    },\r\n    conversationPlaceholder: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\nconst Chat = props => {\r\n    const {history} = props;\r\n    const classes = useStyles();\r\n    const router = useRouter();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const authUser = useSelector(state => state.auth)\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersConversations(authUser._id))\r\n    }, [dispatch])\r\n\r\n    const conversations = useSelector(state => state.conversationsList)\r\n\r\n    useEffect(() => {\r\n        dispatch(getConversationMessages(router.match.params.id))\r\n    }, [dispatch, router.match.params.id])\r\n\r\n    const messages = useSelector(state => state.messagesList)\r\n\r\n    // conversations.forEach(function (conversation) {\r\n    //     conversation.messages = \"false\";\r\n    // });\r\n\r\n    const appState = useSelector((state) => state);\r\n    console.log(appState);\r\n\r\n    const auth = useSelector(state => state.auth)\r\n    if (!auth._id) (\r\n        history.push('/')\r\n    )\r\n\r\n    // const [conversations, setConversations] = useState([]);\r\n\r\n    let selectedConversation;\r\n    let selectedConversationMessages;\r\n\r\n    if (router.match.params.id) {\r\n        selectedConversation = conversations.find(\r\n            c => c.conversationId === router.match.params.id\r\n        );\r\n        selectedConversationMessages = messages.filter(\r\n            m => m.conversationId === router.match.params.id\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Page\r\n            className={clsx({\r\n                [classes.root]: true,\r\n                [classes.openConversion]: selectedConversation\r\n            })}\r\n            title=\"Чаты\"\r\n        >\r\n            <ConversationList\r\n                className={classes.conversationList}\r\n                conversations={conversations}\r\n            />\r\n            {(selectedConversation && selectedConversationMessages) ? (\r\n                <ConversationDetails\r\n                    className={classes.conversationDetails}\r\n                    conversation={selectedConversation}\r\n                    messages={selectedConversationMessages}\r\n                    authUser={authUser}\r\n                />\r\n            ) : (\r\n                <ConversationPlaceholder className={classes.conversationPlaceholder}/>\r\n            )}\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import axios from \"axios\";\r\nimport {url, setHeaders} from \"../../api\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nexport const getUsersConversations = (currentUserId) => {\r\n    return (dispatch) => {\r\n        axios\r\n            .get(`${url}/conversations/${currentUserId}`, setHeaders())\r\n            .then((conversationsList) => {\r\n                dispatch({\r\n                    type: \"CLEAR_CONVERSATIONS\"\r\n                })\r\n                dispatch({\r\n                    type: \"GET_CONVERSATIONS\",\r\n                    conversationsList,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n};\r\n\r\nexport const addConversation = (newConversation) => {\r\n    return (dispatch) => {\r\n        axios\r\n            .post(`${url}/conversations`, { ...newConversation }, setHeaders())\r\n            .then((conversation) => {\r\n                // dispatch({\r\n                //     type: \"CLEAR_CONVERSATIONS\",\r\n                // });\r\n                dispatch({\r\n                    type: \"ADD_CONVERSATION\",\r\n                    conversation,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error.response);\r\n\r\n                toast.error(error.response?.data, {\r\n                    position: toast.POSITION.BOTTOM_RIGHT,\r\n                });\r\n            });\r\n    };\r\n};\r\n\r\nexport const deleteConversation = (conversationId) => {\r\n    return (dispatch) => {\r\n        axios\r\n            .delete(`${url}/conversations/${conversationId}`, setHeaders())\r\n            .then(() => {\r\n                dispatch({\r\n                    type: \"DELETE_PROJECT\",\r\n                    conversationId,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                toast.error(error.response?.data, {\r\n                    position: toast.POSITION.BOTTOM_RIGHT,\r\n                });\r\n            });\r\n    };\r\n};\r\n\r\n// export const getProjectById = (projectId) => {\r\n//     return (dispatch) => {\r\n//         axios\r\n//             .get(`${url}/projects/current/${projectId}`, setProjectHeaders())\r\n//             .then((projectById) => {\r\n//                 dispatch({\r\n//                     type: \"GET_PROJECT_BY_ID\",\r\n//                     projectById,\r\n//                 });\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.log(error);\r\n//             });\r\n//     };\r\n// };"],"sourceRoot":""}