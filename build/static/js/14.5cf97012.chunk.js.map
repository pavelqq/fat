{"version":3,"sources":["views/ProjectCreate/components/AboutAuthor/AboutAuthor.js","components/Alert/Alert.js","views/ProjectCreate/components/AboutProject/AboutProject.js","views/ProjectCreate/components/Header/Header.js","views/ProjectCreate/components/Preferences/Preferences.js","views/ProjectCreate/components/ProjectCover/ProjectCover.js","components/RichEditor/RichEditor.js","views/ProjectCreate/components/ProjectDetails/ProjectDetails.js","views/ProjectCreate/components/ProjectCalendar/components/EventTable/components/TablePaginationActions.js","views/ProjectCreate/components/ProjectCalendar/components/EventTable/components/GlobalFilter.js","views/ProjectCreate/components/ProjectCalendar/components/EventTable/components/TableToolbar.js","views/ProjectCreate/components/ProjectCalendar/components/AddEditEvent/AddEditEvent.js","views/ProjectCreate/components/ProjectCalendar/components/Toolbar/Toolbar.js","views/ProjectCreate/components/ProjectCalendar/ProjectCalendar.js","views/ProjectCreate/components/ProjectCalendar/components/EventTable/EventTable.js","views/ProjectCreate/ProjectCreate.js","components/RichEditor/components/EditorToolbar/EditorToolbar.js","components/RichEditor/utils/block.js","utils/bytesToSize.js","components/FilesDropzone/FilesDropzone.js"],"names":["makeStyles","theme","root","option","border","palette","divider","display","alignItems","padding","spacing","maxWidth","marginTop","selectedOption","backgroundColor","colors","grey","optionRadio","margin","optionDetails","marginLeft","useStyles","borderRadius","shape","default","primary","main","color","contrastText","success","green","white","info","lightBlue","warning","orange","error","message","flexGrow","icon","fontSize","marginRight","action","paddingLeft","icons","Alert","forwardRef","props","ref","className","variant","onClose","rest","classes","Paper","clsx","component","Typography","elevation","IconButton","onClick","alert","marginBottom","formGroup","formSlider","width","fieldGroup","fieldHint","tags","dateField","addButton","Header","gutterBottom","options","flexDirection","editorContainer","minHeight","typography","body2","body1","h1","h2","h3","h4","h5","h6","subtitle1","fontFamily","textAlignLeft","textAlign","textAlignCenter","textAlignRight","textAlignJustify","flexShrink","search","position","fade","common","breakpoints","up","searchIcon","height","pointerEvents","justifyContent","inputRoot","inputInput","transition","transitions","create","paddingRight","highlight","type","secondary","lighten","light","text","dark","title","flex","top","left","transform","outline","boxShadow","shadows","maxHeight","overflowY","field","cancelButton","confirmButton","table","borderColor","subtitle2","fontWeight","blueGrey","borderWidth","opacity","card","values","lg","aboutAuthor","projectCalendar","aboutProject","projectCover","projectDetails","preferences","actions","ProjectCreate","editorRef","useRef","useState","EditorState","createEmpty","editorState","setEditorState","handleEditorChange","slider","setSlider","tag","startDate","endDate","project","setProject","dispatch","useDispatch","Page","noValidate","autoComplete","onSubmit","event","preventDefault","newProject","difficult","_","toNumber","description","JSON","stringify","convertToRaw","getCurrentContent","date","Date","addProject","Card","CardHeader","CardContent","TextField","fullWidth","label","helperText","value","onChange","e","target","name","persist","handleFieldChange","Button","newValues","includes","push","size","map","Chip","deleteIcon","onDelete","filter","t","handleTagDelete","id","defaultValue","now","InputLabelProps","shrink","Slider","newValue","step","marks","min","max","onToggle","newContentState","Modifier","setBlockData","getSelection","newEditorState","RichUtils","toggleBlockType","toggleInlineStyle","Divider","current","focus","blockRenderMap","blockStyleFn","contentBlock","string","getData","get","charAt","toUpperCase","slice","handleKeyCommand","command","newState","keyBindingFn","keyCode","getDefaultKeyBinding","onTab","placeholder","spellCheck","useStyles1","inner","useStyles2","button","minWidth","activeButton","BLOCK_TYPES","blockType","tooltip","FormatQuoteIcon","FormatListBulletedIcon","FormatListNumberedIcon","CodeIcon","INLINE_STYLES","inlineStyle","FormatBoldIcon","FormatItalicIcon","FormatUnderlined","ButtonBase","active","children","Tooltip","BlockTypeButtons","selection","getBlockForKey","getStartKey","getType","blockData","handleClick","InlineStyleButtons","currentStyle","getCurrentInlineStyle","has","EditorToolbar","newBlockRenderMap","Map","unstyled","element","paragraph","DefaultDraftBlockRenderMap","merge","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","dropZone","flexWrap","cursor","dragActive","image","list","FilesDropzone","files","setFiles","handleDrop","useCallback","acceptedFiles","concat","useDropzone","onDrop","getRootProps","getInputProps","isDragActive","alt","src","Link","underline","length","List","file","ListItem","ListItemIcon","ListItemText","primaryTypographyProps","bytesToSize","edge","uuidv4"],"mappings":"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","file":"static/js/14.5cf97012.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    Radio,\r\n    colors\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    option: {\r\n        border: `1px solid ${theme.palette.divider}`,\r\n        display: 'flex',\r\n        alignItems: 'flex-start',\r\n        padding: theme.spacing(2),\r\n        maxWidth: 560,\r\n        '& + &': {\r\n            marginTop: theme.spacing(2)\r\n        }\r\n    },\r\n    selectedOption: {\r\n        backgroundColor: colors.grey[50]\r\n    },\r\n    optionRadio: {\r\n        margin: -10\r\n    },\r\n    optionDetails: {\r\n        marginLeft: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst AboutAuthor = props => {\r\n    const {className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [selected, setSelected] = useState('freelancer');\r\n\r\n    const handleChange = (event, option) => {\r\n        setSelected(option.value);\r\n    };\r\n\r\n    const options = [\r\n        {\r\n            value: 'workout',\r\n            title: 'Тренировочный план',\r\n            description: 'Новый план тренировок'\r\n        },\r\n        {\r\n            value: 'diet',\r\n            title: 'Диета',\r\n            description: 'Новая диета'\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <CardHeader title=\"Что за проект?\"/>\r\n            <CardContent>\r\n                {options.map(option => (\r\n                    <div\r\n                        className={clsx(classes.option, {\r\n                            [classes.selectedOption]: selected === option.value\r\n                        })}\r\n                        key={option.value}\r\n                    >\r\n                        <Radio\r\n                            checked={selected === option.value}\r\n                            className={classes.optionRadio}\r\n                            color=\"primary\"\r\n                            onClick={event => handleChange(event, option)}\r\n                        />\r\n                        <div className={classes.optionDetails}>\r\n                            <Typography\r\n                                gutterBottom\r\n                                variant=\"h5\"\r\n                            >\r\n                                {option.title}\r\n                            </Typography>\r\n                            <Typography variant=\"body1\">{option.description}</Typography>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                {options.title}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nexport default AboutAuthor;\r\n","import React, {forwardRef} from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Paper, IconButton, Typography, colors} from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircleOutlined';\r\nimport CloseIcon from '@material-ui/icons/CloseOutlined';\r\nimport ErrorIcon from '@material-ui/icons/ErrorOutlined';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\nimport WarningIcon from '@material-ui/icons/WarningOutlined';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '16px 24px',\r\n        borderRadius: theme.shape.borderRadius,\r\n        marginTop: theme.spacing(2)\r\n    },\r\n    default: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    success: {\r\n        backgroundColor: colors.green[600],\r\n        color: theme.palette.white\r\n    },\r\n    info: {\r\n        backgroundColor: colors.lightBlue[600],\r\n        color: theme.palette.white\r\n    },\r\n    warning: {\r\n        backgroundColor: colors.orange[900],\r\n        color: theme.palette.white\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.main,\r\n        color: theme.palette.error.contrastText\r\n    },\r\n    message: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '8px 0',\r\n        color: theme.palette.error.contrastText\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    action: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginLeft: 'auto',\r\n        paddingLeft: 16,\r\n        marginRight: -8\r\n    }\r\n}));\r\n\r\nconst icons = {\r\n    default: <InfoIcon/>,\r\n    success: <CheckCircleIcon/>,\r\n    info: <InfoIcon/>,\r\n    warning: <WarningIcon/>,\r\n    error: <ErrorIcon/>\r\n};\r\n\r\nconst Alert = forwardRef((props, ref) => {\r\n    const {className, icon, variant, message, onClose, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Paper\r\n            {...rest}\r\n            className={clsx(classes.root, classes[variant], className)}\r\n            component={Typography}\r\n            elevation={1}\r\n            ref={ref}\r\n            variant=\"h6\"\r\n        >\r\n            <span className={classes.icon}>{icon || icons[variant]}</span>\r\n            <Typography variant='h4' className={classes.message}>\r\n                {message}\r\n            </Typography>\r\n            {onClose && (\r\n                <IconButton\r\n                    className={classes.action}\r\n                    color=\"inherit\"\r\n                    key=\"close\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon/>\r\n                </IconButton>\r\n            )}\r\n        </Paper>\r\n    );\r\n});\r\n\r\n\r\nexport default Alert;\r\n","import React, {useState} from 'react';\r\nimport 'date-fns';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    TextField,\r\n    Button,\r\n    Chip,\r\n    Typography, Slider\r\n} from '@material-ui/core';\r\nimport {MuiPickersUtilsProvider, KeyboardDatePicker, DatePicker} from '@material-ui/pickers';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Alert from \"../../../../components/Alert\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    alert: {\r\n        marginBottom: theme.spacing(3)\r\n    },\r\n    formGroup: {\r\n        marginBottom: theme.spacing(3),\r\n    },\r\n    formSlider: {\r\n        width: '220px'\r\n    },\r\n    fieldGroup: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    fieldHint: {\r\n        margin: theme.spacing(1, 0)\r\n    },\r\n    tags: {\r\n        marginTop: theme.spacing(1),\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(1)\r\n        }\r\n    },\r\n    flexGrow: {\r\n        flexGrow: 1\r\n    },\r\n    dateField: {\r\n        '& + &': {\r\n            marginLeft: theme.spacing(2)\r\n        }\r\n    },\r\n    addButton: {\r\n        marginBottom: theme.spacing(3),\r\n        marginLeft: theme.spacing(1)\r\n    }\r\n}));\r\n\r\n\r\nconst AboutProject = props => {\r\n    const {className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        difficult: '',\r\n        tag: '',\r\n        tags: ['Диета', 'Тренировка'],\r\n        startDate: Date.now(),\r\n        endDate: Date.now()\r\n    };\r\n\r\n    const [values, setValues] = useState({...initialValues});\r\n    const [calendarTrigger, setCalendarTrigger] = useState(null);\r\n\r\n    const handleFieldChange = (event, field, value) => {\r\n        event.persist && event.persist();\r\n        setValues(values => ({\r\n            ...values,\r\n            [field]: value\r\n        }));\r\n    };\r\n\r\n    const handleTagAdd = () => {\r\n        setValues(values => {\r\n            const newValues = {...values};\r\n\r\n            if (newValues.tag && !newValues.tags.includes(newValues.tag)) {\r\n                newValues.tags = [...newValues.tags];\r\n                newValues.tags.push(newValues.tag);\r\n            }\r\n\r\n            newValues.tag = '';\r\n\r\n            return newValues;\r\n        });\r\n    };\r\n\r\n    const handleTagDelete = tag => {\r\n        setValues(values => {\r\n            const newValues = {...values};\r\n\r\n            newValues.tags = newValues.tags.filter(t => t !== tag);\r\n\r\n            return newValues;\r\n        });\r\n    };\r\n\r\n    const handleCalendarOpen = trigger => {\r\n        setCalendarTrigger(trigger);\r\n    };\r\n\r\n    const handleCalendarChange = () => {\r\n    };\r\n\r\n    const handleCalendarAccept = date => {\r\n        setValues(values => ({\r\n            ...values,\r\n            [calendarTrigger]: date\r\n        }));\r\n    };\r\n\r\n    const handleCalendarClose = () => {\r\n        setCalendarTrigger(false);\r\n    };\r\n\r\n    const calendarOpen = Boolean(calendarTrigger);\r\n    const calendarMinDate =\r\n        calendarTrigger === 'startDate'\r\n            ? moment()\r\n            : moment(values.startDate).add(1, 'day');\r\n    const calendarValue = values[calendarTrigger];\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <CardHeader title=\"О проекте\"/>\r\n            <CardContent>\r\n                <form>\r\n                    {/*<Alert*/}\r\n                    {/*    className={classes.alert}*/}\r\n                    {/*    message=\"Выбирайте названия с умом! :)\"*/}\r\n                    {/*/>*/}\r\n                    <div className={classes.formGroup}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Название\"\r\n                            helperText=\"Придумайте название для проекта\"\r\n                            name=\"name\"\r\n                            onChange={event =>\r\n                                handleFieldChange(event, 'name', event.target.value)\r\n                            }\r\n                            value={values.name}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                    <div className={classes.formGroup}>\r\n                        <div className={classes.fieldGroup}>\r\n                            <TextField\r\n                                className={classes.flexGrow}\r\n                                label=\"Теги\"\r\n                                helperText=\"Придумайте теги для поиска\"\r\n                                name=\"tag\"\r\n                                onChange={event =>\r\n                                    handleFieldChange(event, 'tag', event.target.value)\r\n                                }\r\n                                value={values.tag}\r\n                                variant=\"outlined\"\r\n                            />\r\n                            <Button\r\n                                className={classes.addButton}\r\n                                onClick={handleTagAdd}\r\n                                size=\"small\"\r\n                            >\r\n                                <AddIcon className={classes.addIcon}/>\r\n                                Добавить\r\n                            </Button>\r\n                        </div>\r\n                        <Typography\r\n                            className={classes.fieldHint}\r\n                            variant=\"body2\"\r\n                        >\r\n                            Теги для поиска:\r\n                        </Typography>\r\n                        <div className={classes.tags}>\r\n                            {values.tags.map(tag => (\r\n                                <Chip\r\n                                    deleteIcon={<CloseIcon/>}\r\n                                    key={tag}\r\n                                    label={tag}\r\n                                    onDelete={() => handleTagDelete(tag)}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.formGroup}>\r\n                        <div className={classes.fieldGroup}>\r\n                            <TextField\r\n                                className={classes.dateField}\r\n                                label=\"Начало проекта\"\r\n                                name=\"startDate\"\r\n                                onClick={() => handleCalendarOpen('startDate')}\r\n                                value={moment(values.startDate).format('DD/MM/yyyy')}\r\n                                variant=\"outlined\"\r\n                            />\r\n                            <TextField\r\n                                className={classes.dateField}\r\n                                label=\"Конец проекта\"\r\n                                name=\"endDate\"\r\n                                onClick={() => handleCalendarOpen('endDate')}\r\n                                value={moment(values.endDate).format('DD/MM/yyyy')}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.formSlider}>\r\n                        <Typography id=\"discrete-slider\" gutterBottom>\r\n                            Сложность\r\n                        </Typography>\r\n                        <Slider\r\n                            defaultValue={1}\r\n                            aria-labelledby=\"discrete-slider\"\r\n                            valueLabelDisplay=\"auto\"\r\n                            getAriaValueText={values.difficult}\r\n                            step={1}\r\n                            marks\r\n                            min={1}\r\n                            max={10}\r\n                            helperText=\"Придумайте название для проекта\"\r\n                            onChange={event =>\r\n                                handleFieldChange(event, 'difficult', event.target.value)\r\n                            }\r\n                            // value={values.difficult}\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </CardContent>\r\n            <DatePicker\r\n                cancelLabel=\"отмена\"\r\n                minDate={calendarMinDate}\r\n                onAccept={handleCalendarAccept}\r\n                onChange={handleCalendarChange}\r\n                onClose={handleCalendarClose}\r\n                open={calendarOpen}\r\n                style={{display: 'none'}}\r\n                value={calendarValue}\r\n                variant=\"dialog\"\r\n            />\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nexport default AboutProject;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Typography} from '@material-ui/core';\r\nimport Alert from \"../../../../components/Alert\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {}\r\n}));\r\n\r\nconst Header = props => {\r\n    const {className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <Typography\r\n                component=\"h2\"\r\n                gutterBottom\r\n                variant=\"overline\"\r\n            >\r\n                Новый проект\r\n            </Typography>\r\n            <Typography\r\n                component=\"h1\"\r\n                variant=\"h3\"\r\n            >\r\n                Создать новый проект!\r\n            </Typography>\r\n            <Alert\r\n                variant={'default'}\r\n                message={\r\n                    `Здесь вы можете заполнить основную информацию о проекте.\\\r\n                    Чтобы заполнить тренировочный план и диету, перейдите в созданный проект и\r\n                    выберете соответствующую вкладку, и заполните задачи там.`\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    FormControlLabel,\r\n    Checkbox\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    options: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n}));\r\n\r\nconst Preferences = props => {\r\n    const {className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <CardHeader title=\"Настройки доступа\"/>\r\n            <CardContent>\r\n                <Typography\r\n                    gutterBottom\r\n                    variant=\"h6\"\r\n                >\r\n                    Приватность\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                    Вы можете ограничить доступ к плану\r\n                </Typography>\r\n                <div className={classes.options}>\r\n                    {/*<FormControlLabel*/}\r\n                    {/*    control={*/}\r\n                    {/*        <Checkbox*/}\r\n                    {/*            color=\"primary\"*/}\r\n                    {/*            defaultChecked*/}\r\n                    {/*        />*/}\r\n                    {/*    }*/}\r\n                    {/*    label=\"Разрешить доступ всем\"*/}\r\n                    {/*/>*/}\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Приватный доступ\"\r\n                    />\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nexport default Preferences;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Card, CardHeader, CardContent } from '@material-ui/core';\r\n\r\nimport FilesDropzone from \"../../../../components/FilesDropzone\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst ProjectCover = props => {\r\n  const { className, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <CardHeader title=\"Загрузите файлы, если нужно\" />\r\n      <CardContent>\r\n        <FilesDropzone />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\nexport default ProjectCover;\r\n","import React, {useState, useRef} from 'react';\r\nimport clsx from 'clsx';\r\nimport {\r\n    Editor,\r\n    EditorState,\r\n    RichUtils,\r\n    Modifier,\r\n    getDefaultKeyBinding\r\n} from 'draft-js';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Paper, Divider} from '@material-ui/core';\r\n\r\nimport {EditorToolbar} from './components';\r\nimport {blockRenderMap} from './utils';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    editorContainer: {\r\n        padding: theme.spacing(2),\r\n        minHeight: 250,\r\n        '& .public-DraftEditorPlaceholder-root': {\r\n            ...theme.typography.body2\r\n        },\r\n        '& .public-DraftEditorPlaceholder-hasFocus': {\r\n            display: 'none'\r\n        },\r\n        '& .public-DraftEditor-content': {\r\n            '& p': {\r\n                ...theme.typography.body1\r\n            },\r\n            '& h1': {\r\n                ...theme.typography.h1\r\n            },\r\n            '& h2': {\r\n                ...theme.typography.h2\r\n            },\r\n            '& h3': {\r\n                ...theme.typography.h3\r\n            },\r\n            '& h4': {\r\n                ...theme.typography.h4\r\n            },\r\n            '& h5': {\r\n                ...theme.typography.h5\r\n            },\r\n            '& h6': {\r\n                ...theme.typography.h6\r\n            },\r\n            '& blockquote': {\r\n                ...theme.typography.subtitle1\r\n            },\r\n            '& ul': {\r\n                ...theme.typography.body1,\r\n                marginLeft: theme.spacing(4)\r\n            },\r\n            '& ol': {\r\n                ...theme.typography.body1,\r\n                marginLeft: theme.spacing(4)\r\n            },\r\n            '& pre': {\r\n                backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n                fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n                fontSize: 16,\r\n                padding: 2\r\n            }\r\n        }\r\n    },\r\n    textAlignLeft: {\r\n        textAlign: 'left'\r\n    },\r\n    textAlignCenter: {\r\n        textAlign: 'center'\r\n    },\r\n    textAlignRight: {\r\n        textAlign: 'right'\r\n    },\r\n    textAlignJustify: {\r\n        textAlign: 'justify'\r\n    }\r\n}));\r\n\r\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\nconst RichEditor = props => {\r\n    const {placeholder, className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const editorRef = useRef(null);\r\n\r\n    const [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n    const handleContainerClick = () => {\r\n        editorRef.current.focus();\r\n    };\r\n\r\n    const handleToolbarToggle = (type, value) => {\r\n        if (type === 'blockType') {\r\n            if (['left', 'center', 'right', 'justify'].includes(value)) {\r\n                const newContentState = Modifier.setBlockData(\r\n                    editorState.getCurrentContent(),\r\n                    editorState.getSelection(),\r\n                    {'text-align': value}\r\n                );\r\n\r\n                const newEditorState = EditorState.push(\r\n                    editorState,\r\n                    newContentState,\r\n                    'change-block-data'\r\n                );\r\n\r\n                setEditorState(newEditorState);\r\n                return;\r\n            }\r\n\r\n            setEditorState(RichUtils.toggleBlockType(editorState, value));\r\n        } else {\r\n            setEditorState(RichUtils.toggleInlineStyle(editorState, value));\r\n        }\r\n    };\r\n\r\n    const handleEditorChange = editorState => {\r\n        setEditorState(editorState);\r\n    };\r\n\r\n    const handleKeyCommand = (command, editorState) => {\r\n        const newState = RichUtils.handleKeyCommand(editorState, command);\r\n\r\n        if (newState) {\r\n            handleEditorChange(newState);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const mapKeyToEditorCommand = event => {\r\n        if (event.keyCode === 9) {\r\n            const newEditorState = RichUtils.onTab(event, editorState, 4);\r\n\r\n            if (newEditorState !== editorState) {\r\n                handleEditorChange(newEditorState);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        return getDefaultKeyBinding(event);\r\n    };\r\n\r\n    function blockStyleFn(contentBlock) {\r\n        const textAlign = contentBlock.getData().get('text-align');\r\n\r\n        if (textAlign) {\r\n            const className = `textAlign${capitalize(textAlign)}`;\r\n\r\n            return classes[className];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <Paper\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <EditorToolbar\r\n                editorState={editorState}\r\n                onToggle={handleToolbarToggle}\r\n            />\r\n            <Divider/>\r\n            <div\r\n                className={classes.editorContainer}\r\n                onClick={handleContainerClick}\r\n            >\r\n                <Editor\r\n                    blockRenderMap={blockRenderMap}\r\n                    blockStyleFn={blockStyleFn}\r\n                    editorState={editorState}\r\n                    handleKeyCommand={handleKeyCommand}\r\n                    keyBindingFn={mapKeyToEditorCommand}\r\n                    onChange={handleEditorChange}\r\n                    placeholder={placeholder}\r\n                    ref={editorRef}\r\n                    spellCheck\r\n                />\r\n            </div>\r\n        </Paper>\r\n    );\r\n};\r\n\r\n\r\nexport default RichEditor;\r\n","import React, {useRef, useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Card, CardHeader, CardContent, Divider, Paper} from '@material-ui/core';\r\nimport RichEditor from \"../../../../components/RichEditor\";\r\nimport {Editor, EditorState, getDefaultKeyBinding, Modifier, RichUtils} from \"draft-js\";\r\nimport {EditorToolbar} from \"../../../../components/RichEditor/components\";\r\nimport {blockRenderMap} from \"../../../../components/RichEditor/utils\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    editorContainer: {\r\n        padding: theme.spacing(2),\r\n        minHeight: 250,\r\n        '& .public-DraftEditorPlaceholder-root': {\r\n            ...theme.typography.body2\r\n        },\r\n        '& .public-DraftEditorPlaceholder-hasFocus': {\r\n            display: 'none'\r\n        },\r\n        '& .public-DraftEditor-content': {\r\n            '& p': {\r\n                ...theme.typography.body1\r\n            },\r\n            '& h1': {\r\n                ...theme.typography.h1\r\n            },\r\n            '& h2': {\r\n                ...theme.typography.h2\r\n            },\r\n            '& h3': {\r\n                ...theme.typography.h3\r\n            },\r\n            '& h4': {\r\n                ...theme.typography.h4\r\n            },\r\n            '& h5': {\r\n                ...theme.typography.h5\r\n            },\r\n            '& h6': {\r\n                ...theme.typography.h6\r\n            },\r\n            '& blockquote': {\r\n                ...theme.typography.subtitle1\r\n            },\r\n            '& ul': {\r\n                ...theme.typography.body1,\r\n                marginLeft: theme.spacing(4)\r\n            },\r\n            '& ol': {\r\n                ...theme.typography.body1,\r\n                marginLeft: theme.spacing(4)\r\n            },\r\n            '& pre': {\r\n                backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n                fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n                fontSize: 16,\r\n                padding: 2\r\n            }\r\n        }\r\n    },\r\n    textAlignLeft: {\r\n        textAlign: 'left'\r\n    },\r\n    textAlignCenter: {\r\n        textAlign: 'center'\r\n    },\r\n    textAlignRight: {\r\n        textAlign: 'right'\r\n    },\r\n    textAlignJustify: {\r\n        textAlign: 'justify'\r\n    }\r\n}));\r\n\r\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\nconst ProjectDetails = props => {\r\n    const {className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const editorRef = useRef(null);\r\n\r\n    const [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n    const handleContainerClick = () => {\r\n        editorRef.current.focus();\r\n    };\r\n\r\n    const handleToolbarToggle = (type, value) => {\r\n        if (type === 'blockType') {\r\n            if (['left', 'center', 'right', 'justify'].includes(value)) {\r\n                const newContentState = Modifier.setBlockData(\r\n                    editorState.getCurrentContent(),\r\n                    editorState.getSelection(),\r\n                    {'text-align': value}\r\n                );\r\n\r\n                const newEditorState = EditorState.push(\r\n                    editorState,\r\n                    newContentState,\r\n                    'change-block-data'\r\n                );\r\n\r\n                setEditorState(newEditorState);\r\n                return;\r\n            }\r\n\r\n            setEditorState(RichUtils.toggleBlockType(editorState, value));\r\n        } else {\r\n            setEditorState(RichUtils.toggleInlineStyle(editorState, value));\r\n        }\r\n    };\r\n\r\n    const handleEditorChange = editorState => {\r\n        setEditorState(editorState);\r\n    };\r\n\r\n    const handleKeyCommand = (command, editorState) => {\r\n        const newState = RichUtils.handleKeyCommand(editorState, command);\r\n\r\n        if (newState) {\r\n            handleEditorChange(newState);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const mapKeyToEditorCommand = event => {\r\n        if (event.keyCode === 9) {\r\n            const newEditorState = RichUtils.onTab(event, editorState, 4);\r\n\r\n            if (newEditorState !== editorState) {\r\n                handleEditorChange(newEditorState);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        return getDefaultKeyBinding(event);\r\n    };\r\n\r\n    function blockStyleFn(contentBlock) {\r\n        const textAlign = contentBlock.getData().get('text-align');\r\n\r\n        if (textAlign) {\r\n            const className = `textAlign${capitalize(textAlign)}`;\r\n\r\n            return classes[className];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <CardHeader title=\"Детали проекта\"/>\r\n            <CardContent>\r\n                <Paper\r\n                    {...rest}\r\n                    className={clsx(classes.root, className)}\r\n                >\r\n                    <EditorToolbar\r\n                        editorState={editorState}\r\n                        onToggle={handleToolbarToggle}\r\n                    />\r\n                    <Divider/>\r\n                    <div\r\n                        className={classes.editorContainer}\r\n                        onClick={handleContainerClick}\r\n                    >\r\n                        <Editor\r\n                            blockRenderMap={blockRenderMap}\r\n                            blockStyleFn={blockStyleFn}\r\n                            editorState={editorState}\r\n                            handleKeyCommand={handleKeyCommand}\r\n                            keyBindingFn={mapKeyToEditorCommand}\r\n                            onChange={handleEditorChange}\r\n                            placeholder=\"Опишите детали проекта...\"\r\n                            ref={editorRef}\r\n                            spellCheck\r\n                        />\r\n                    </div>\r\n                </Paper>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nexport default ProjectDetails;\r\n","import React from 'react'\r\n\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\r\nimport LastPageIcon from '@material-ui/icons/LastPage'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexShrink: 0,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n}))\r\n\r\nconst TablePaginationActions = props => {\r\n    const classes = useStyles()\r\n    const theme = useTheme()\r\n    const { count, page, rowsPerPage, onChangePage } = props\r\n\r\n    const handleFirstPageButtonClick = event => {\r\n        onChangePage(event, 0)\r\n    }\r\n\r\n    const handleBackButtonClick = event => {\r\n        onChangePage(event, page - 1)\r\n    }\r\n\r\n    const handleNextButtonClick = event => {\r\n        onChangePage(event, page + 1)\r\n    }\r\n\r\n    const handleLastPageButtonClick = event => {\r\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleBackButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"previous page\"\r\n            >\r\n                {theme.direction === 'rtl' ? (\r\n                    <KeyboardArrowRight />\r\n                ) : (\r\n                    <KeyboardArrowLeft />\r\n                )}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? (\r\n                    <KeyboardArrowLeft />\r\n                ) : (\r\n                    <KeyboardArrowRight />\r\n                )}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TablePaginationActions\r\n","import React from 'react'\r\n\r\nimport InputBase from '@material-ui/core/InputBase'\r\nimport { fade, makeStyles } from '@material-ui/core/styles'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginRight: theme.spacing(2),\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        width: theme.spacing(7),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 7),\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: 200,\r\n        },\r\n    },\r\n}))\r\n\r\nconst GlobalFilter = ({\r\n                          preGlobalFilteredRows,\r\n                          globalFilter,\r\n                          setGlobalFilter,\r\n                      }) => {\r\n    const classes = useStyles()\r\n    const count = preGlobalFilteredRows.length\r\n\r\n    // Global filter only works with pagination from the first page.\r\n    // This may not be a problem for server side pagination when\r\n    // only the current page is downloaded.\r\n\r\n    return (\r\n        <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n                <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n                value={globalFilter || ''}\r\n                onChange={e => {\r\n                    setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n                }}\r\n                placeholder={`${count} records...`}\r\n                classes={{\r\n                    root: classes.inputRoot,\r\n                    input: classes.inputInput,\r\n                }}\r\n                inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GlobalFilter\r\n","import React from 'react'\r\n\r\nimport AddUserDialog from './AddUserDialog'\r\nimport clsx from 'clsx'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport GlobalFilter from './GlobalFilter'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nconst useToolbarStyles = makeStyles(theme => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}))\r\n\r\nconst TableToolbar = props => {\r\n    const classes = useToolbarStyles()\r\n    const {\r\n        numSelected,\r\n        addUserHandler,\r\n        deleteUserHandler,\r\n        preGlobalFilteredRows,\r\n        setGlobalFilter,\r\n        globalFilter,\r\n    } = props\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            <AddUserDialog addUserHandler={addUserHandler} />\r\n            {numSelected > 0 ? (\r\n                <Typography\r\n                    className={classes.title}\r\n                    color=\"inherit\"\r\n                    variant=\"subtitle1\"\r\n                >\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\r\n                    Users\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\" onClick={deleteUserHandler}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <GlobalFilter\r\n                    preGlobalFilteredRows={preGlobalFilteredRows}\r\n                    globalFilter={globalFilter}\r\n                    setGlobalFilter={setGlobalFilter}\r\n                />\r\n            )}\r\n        </Toolbar>\r\n    )\r\n}\r\n\r\n\r\nexport default TableToolbar\r\n","/* eslint-disable react/display-name */\r\nimport React, {useState, forwardRef} from 'react';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardActions,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n    IconButton,\r\n    Divider,\r\n    FormControlLabel,\r\n    Switch,\r\n    colors\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\nimport EventTable from \"../EventTable\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        outline: 'none',\r\n        boxShadow: theme.shadows[20],\r\n        width: '90%',\r\n        maxHeight: '100%',\r\n        overflowY: 'auto',\r\n        maxWidth: '100%'\r\n    },\r\n    field: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    cancelButton: {\r\n        marginLeft: theme.spacing(3)\r\n    },\r\n    confirmButton: {\r\n        color: theme.palette.white,\r\n        backgroundColor: colors.green[600],\r\n        '&:hover': {\r\n            backgroundColor: colors.green[900]\r\n        }\r\n    },\r\n    table: {\r\n        marginTop: theme.spacing(3)\r\n    }\r\n}));\r\n\r\nconst AddEditEvent = forwardRef((props, ref) => {\r\n    const {\r\n        event,\r\n        onDelete,\r\n        onCancel,\r\n        onAdd,\r\n        onEdit,\r\n        className,\r\n        ...rest\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const defaultEvent = {\r\n        title: 'Задание',\r\n        desc: 'Описание задания',\r\n        allDay: true,\r\n        start: moment().toDate(),\r\n        end: moment().toDate()\r\n    };\r\n\r\n    const [values, setValues] = useState(event || defaultEvent);\r\n\r\n    const mode = event ? 'Изменить' : 'Добавить';\r\n\r\n    const handleFieldChange = e => {\r\n        e.persist();\r\n        setValues(values => ({\r\n            ...values,\r\n            [e.target.name]:\r\n                e.target.type === 'checkbox' ? e.target.checked : e.target.value\r\n        }));\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        onDelete && onDelete(event);\r\n    };\r\n\r\n    const handleAdd = () => {\r\n        if (!values.title || !values.desc) {\r\n            return;\r\n        }\r\n\r\n        onAdd({...values, id: uuidv4()});\r\n    };\r\n\r\n    const handleEdit = () => {\r\n        if (!values.title || !values.desc) {\r\n            return;\r\n        }\r\n\r\n        onEdit(values);\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n            ref={ref}\r\n        >\r\n            <form>\r\n                <CardContent>\r\n                    <Typography\r\n                        align=\"center\"\r\n                        variant=\"h3\"\r\n                    >\r\n                        {mode === 'Добавить' ? 'Добавить задание' : 'Изменить задание'}\r\n                        <Button\r\n                            className={classes.cancelButton}\r\n                            onClick={onCancel}\r\n                            variant=\"contained\"\r\n                        >\r\n                            Выход\r\n                        </Button>\r\n                    </Typography>\r\n                    <TextField\r\n                        className={classes.field}\r\n                        fullWidth\r\n                        label=\"Заголовок\"\r\n                        name=\"title\"\r\n                        onChange={handleFieldChange}\r\n                        value={values.title}\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <TextField\r\n                        className={classes.field}\r\n                        fullWidth\r\n                        label=\"Описание\"\r\n                        name=\"desc\"\r\n                        onChange={handleFieldChange}\r\n                        value={values.desc}\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <EventTable\r\n                        className={classes.table}\r\n                    />\r\n                    <FormControlLabel\r\n                        className={classes.field}\r\n                        control={\r\n                            <Switch\r\n                                checked={values.allDay}\r\n                                name=\"allDay\"\r\n                                onChange={handleFieldChange}\r\n                            />\r\n                        }\r\n                        label=\"Весь день\"\r\n                    />\r\n                    <TextField\r\n                        className={classes.field}\r\n                        defaultValue={moment(values.start).format('YYYY-MM-DDThh:mm:ss')}\r\n                        fullWidth\r\n                        label=\"Начальная дата\"\r\n                        name=\"start\"\r\n                        onChange={handleFieldChange}\r\n                        type=\"datetime-local\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <TextField\r\n                        className={classes.field}\r\n                        defaultValue={moment(values.end).format('YYYY-MM-DDThh:mm:ss')}\r\n                        disabled={values.allDay}\r\n                        fullWidth\r\n                        label=\"Конечная дата\"\r\n                        name=\"end\"\r\n                        onChange={handleFieldChange}\r\n                        type=\"datetime-local\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                </CardContent>\r\n                <Divider/>\r\n                <CardActions>\r\n                    <Button\r\n                        className={classes.cancelButton}\r\n                        onClick={onCancel}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Выход\r\n                    </Button>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        onClick={handleDelete}\r\n                    >\r\n                        <DeleteIcon/>\r\n                    </IconButton>\r\n                    {mode === 'Добавить' ? (\r\n                        <Button\r\n                            className={classes.confirmButton}\r\n                            onClick={handleAdd}\r\n                            variant=\"contained\"\r\n                        >\r\n                            Добавить\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            className={classes.confirmButton}\r\n                            onClick={handleEdit}\r\n                            variant=\"contained\"\r\n                        >\r\n                            Сохранить\r\n                        </Button>\r\n                    )}\r\n                </CardActions>\r\n            </form>\r\n        </Card>\r\n    );\r\n});\r\n\r\n\r\nexport default AddEditEvent;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Grid,\r\n  Hidden,\r\n  Typography,\r\n  Tooltip,\r\n  ButtonGroup,\r\n  IconButton,\r\n  Button\r\n} from '@material-ui/core';\r\nimport ViewConfigIcon from '@material-ui/icons/ViewComfyOutlined';\r\nimport ViewWeekIcon from '@material-ui/icons/ViewWeekOutlined';\r\nimport ViewDayIcon from '@material-ui/icons/ViewDayOutlined';\r\nimport ViewAgendaIcon from '@material-ui/icons/ViewAgendaOutlined';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst Toolbar = props => {\r\n  const {\r\n    date,\r\n    view,\r\n    onDatePrev,\r\n    onDateNext,\r\n    onEventAdd,\r\n    onViewChange,\r\n    onDateToday,\r\n    className,\r\n    ...rest\r\n  } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  const viewOptions = [\r\n    {\r\n      label: 'Месяц',\r\n      value: 'dayGridMonth',\r\n      icon: ViewConfigIcon\r\n    },\r\n    {\r\n      label: 'Неделя',\r\n      value: 'timeGridWeek',\r\n      icon: ViewWeekIcon\r\n    },\r\n    {\r\n      label: 'День',\r\n      value: 'timeGridDay',\r\n      icon: ViewDayIcon\r\n    },\r\n    {\r\n      label: 'Задачи дня',\r\n      value: 'listWeek',\r\n      icon: ViewAgendaIcon\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <Grid\r\n        alignItems=\"flex-end\"\r\n        container\r\n        justify=\"space-between\"\r\n        spacing={3}\r\n      >\r\n        <Grid item>\r\n          <Typography\r\n            component=\"h2\"\r\n            gutterBottom\r\n            variant=\"overline\"\r\n          >\r\n            Calendar\r\n          </Typography>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h3\"\r\n          >\r\n            Здесь ваш план\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={onEventAdd}\r\n            variant=\"contained\"\r\n          >\r\n            Добавить событие\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        alignItems=\"center\"\r\n        container\r\n        justify=\"space-between\"\r\n        spacing={3}\r\n      >\r\n        <Grid item>\r\n          <ButtonGroup>\r\n            <Button onClick={onDatePrev}>Предыдущий</Button>\r\n            <Button onClick={onDateToday}>Сегодня</Button>\r\n            <Button onClick={onDateNext}>Следующий</Button>\r\n          </ButtonGroup>\r\n        </Grid>\r\n        <Hidden smDown>\r\n          <Grid item>\r\n            <Typography variant=\"h3\">\r\n              {moment(date).format('MMMM YYYY')}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            {viewOptions.map(viewOption => {\r\n              const Icon = viewOption.icon;\r\n\r\n              return (\r\n                <Tooltip\r\n                  key={viewOption.value}\r\n                  title={viewOption.label}\r\n                >\r\n                  <IconButton\r\n                    color={viewOption.value === view ? 'primary' : 'default'}\r\n                    onClick={() => onViewChange(viewOption.value)}\r\n                  >\r\n                    <Icon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Hidden>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Toolbar;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport timelinePlugin from '@fullcalendar/timeline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Modal,\r\n    Card,\r\n    CardContent,\r\n    colors,\r\n    useTheme,\r\n    useMediaQuery\r\n} from '@material-ui/core';\r\nimport '@fullcalendar/common/main.css';\r\nimport '@fullcalendar/daygrid/main.css';\r\nimport '@fullcalendar/timegrid/main.css';\r\nimport '@fullcalendar/list/main.css';\r\n\r\nimport axios from '../../../../utils/axios';\r\nimport { AddEditEvent, Toolbar } from './components';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100%',\r\n        padding: theme.spacing(3),\r\n        '& .fc-unthemed td': {\r\n            borderColor: theme.palette.divider\r\n        },\r\n        '& .fc-widget-header': {\r\n            backgroundColor: colors.grey[50]\r\n        },\r\n        '& .fc-axis': {\r\n            ...theme.typography.body2\r\n        },\r\n        '& .fc-list-item-time': {\r\n            ...theme.typography.body2\r\n        },\r\n        '& .fc-list-item-title': {\r\n            ...theme.typography.body1\r\n        },\r\n        '& .fc-list-heading-main': {\r\n            ...theme.typography.h6\r\n        },\r\n        '& .fc-list-heading-alt': {\r\n            ...theme.typography.h6\r\n        },\r\n        '& .fc th': {\r\n            borderColor: theme.palette.divider\r\n        },\r\n        '& .fc-day-header': {\r\n            ...theme.typography.subtitle2,\r\n            fontWeight: 500,\r\n            color: theme.palette.text.secondary,\r\n            padding: theme.spacing(1),\r\n            backgroundColor: colors.grey[50]\r\n        },\r\n        '& .fc-day-top': {\r\n            ...theme.typography.body2\r\n        },\r\n        '& .fc-highlight': {\r\n            backgroundColor: colors.blueGrey[50]\r\n        },\r\n        '& .fc-event': {\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: theme.palette.primary.contrastText,\r\n            borderWidth: 2,\r\n            opacity: 0.9,\r\n            '& .fc-time': {\r\n                ...theme.typography.h6,\r\n                color: 'inherit'\r\n            },\r\n            '& .fc-title': {\r\n                ...theme.typography.body1,\r\n                color: 'inherit'\r\n            }\r\n        },\r\n        '& .fc-list-empty': {\r\n            ...theme.typography.subtitle1\r\n        }\r\n    },\r\n    card: {\r\n        marginTop: theme.spacing(3)\r\n    }\r\n}));\r\n\r\n\r\nconst ProjectCalendar = () => {\r\n    const classes = useStyles();\r\n    const calendarRef = useRef(null);\r\n    const theme = useTheme();\r\n    const mobileDevice = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [view, setView] = useState(mobileDevice ? 'listWeek' : 'dayGridMonth');\r\n    const [date, setDate] = useState(moment('2019-07-30 08:00:00').toDate());\r\n    const [events, setEvents] = useState([]);\r\n    const [eventModal, setEventModal] = useState({\r\n        open: false,\r\n        event: null\r\n    });\r\n\r\n    useEffect(() => {\r\n        let mounted = true;\r\n\r\n        const fetchEvents = () => {\r\n            if (mounted) {\r\n                axios\r\n                    .get('/api/calendar')\r\n                    .then(response => setEvents(response.data.events));\r\n            }\r\n        };\r\n\r\n        fetchEvents();\r\n\r\n        return () => {\r\n            mounted = false;\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const calendarApi = calendarRef.current.getApi();\r\n        const newView = mobileDevice ? 'listWeek' : 'dayGridMonth';\r\n\r\n        calendarApi.changeView(newView);\r\n        setView(newView);\r\n    }, [mobileDevice]);\r\n\r\n    const handleEventClick = info => {\r\n        const selected = events.find(event => event.id === info.event.id);\r\n\r\n        setEventModal({\r\n            open: true,\r\n            event: selected\r\n        });\r\n    };\r\n\r\n    const handleEventNew = () => {\r\n        setEventModal({\r\n            open: true,\r\n            event: null\r\n        });\r\n    };\r\n\r\n    const handleEventDelete = event => {\r\n        setEvents(events => events.filter(e => e.id !== event.id));\r\n        setEventModal({\r\n            open: false,\r\n            event: null\r\n        });\r\n    };\r\n\r\n    const handleModalClose = () => {\r\n        setEventModal({\r\n            open: false,\r\n            event: null\r\n        });\r\n    };\r\n\r\n    const handleEventAdd = event => {\r\n        setEvents(events => [...events, event]);\r\n        setEventModal({\r\n            open: false,\r\n            event: null\r\n        });\r\n    };\r\n\r\n    const handleEventEdit = event => {\r\n        setEvents(events => events.map(e => (e.id === event.id ? event : e)));\r\n        setEventModal({\r\n            open: false,\r\n            event: null\r\n        });\r\n    };\r\n\r\n    const handleDateToday = () => {\r\n        const calendarApi = calendarRef.current.getApi();\r\n\r\n        calendarApi.today();\r\n        setDate(calendarApi.getDate());\r\n    };\r\n\r\n    const handleViewChange = view => {\r\n        const calendarApi = calendarRef.current.getApi();\r\n\r\n        calendarApi.changeView(view);\r\n        setView(view);\r\n    };\r\n\r\n    const handleDatePrev = () => {\r\n        const calendarApi = calendarRef.current.getApi();\r\n\r\n        calendarApi.prev();\r\n        setDate(calendarApi.getDate());\r\n    };\r\n\r\n    const handleDateNext = () => {\r\n        const calendarApi = calendarRef.current.getApi();\r\n\r\n        calendarApi.next();\r\n        setDate(calendarApi.getDate());\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={classes.root}\r\n        >\r\n            <Toolbar\r\n                date={date}\r\n                onDateNext={handleDateNext}\r\n                onDatePrev={handleDatePrev}\r\n                onDateToday={handleDateToday}\r\n                onEventAdd={handleEventNew}\r\n                onViewChange={handleViewChange}\r\n                view={view}\r\n            />\r\n            <Card className={classes.card}>\r\n                <CardContent>\r\n                    <FullCalendar\r\n                        locale={'ru'}\r\n                        schedulerLicenseKey={'GPL-My-Project-Is-Open-Source'}\r\n                        allDayMaintainDuration\r\n                        defaultDate={date}\r\n                        defaultView={view}\r\n                        droppable\r\n                        editable\r\n                        eventClick={handleEventClick}\r\n                        eventResizableFromStart\r\n                        events={events}\r\n                        header={false}\r\n                        height={800}\r\n                        plugins={[\r\n                            dayGridPlugin,\r\n                            timeGridPlugin,\r\n                            interactionPlugin,\r\n                            listPlugin,\r\n                            timelinePlugin\r\n                        ]}\r\n                        ref={calendarRef}\r\n                        rerenderDelay={10}\r\n                        selectable\r\n                        weekends\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n            <Modal\r\n                onClose={handleModalClose}\r\n                open={eventModal.open}\r\n            >\r\n                <AddEditEvent\r\n                    event={eventModal.event}\r\n                    onAdd={handleEventAdd}\r\n                    onCancel={handleModalClose}\r\n                    onDelete={handleEventDelete}\r\n                    onEdit={handleEventEdit}\r\n                />\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ProjectCalendar;\r\n","import React from 'react'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport EnhancedTable from './components/EnhancedTable'\r\nimport makeData from './makeData'\r\n\r\nconst EventTable = () => {\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'First Name',\r\n                accessor: 'firstName',\r\n            },\r\n            {\r\n                Header: 'Last Name',\r\n                accessor: 'lastName',\r\n            },\r\n            {\r\n                Header: 'Age',\r\n                accessor: 'age',\r\n            },\r\n            {\r\n                Header: 'Visits',\r\n                accessor: 'visits',\r\n            },\r\n            {\r\n                Header: 'Status',\r\n                accessor: 'status',\r\n            },\r\n            {\r\n                Header: 'Profile Progress',\r\n                accessor: 'progress',\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const [data, setData] = React.useState(React.useMemo(() => makeData(20), []))\r\n    const [skipPageReset, setSkipPageReset] = React.useState(false)\r\n\r\n    const updateMyData = (rowIndex, columnId, value) => {\r\n        setSkipPageReset(true)\r\n        setData(old =>\r\n            old.map((row, index) => {\r\n                if (index === rowIndex) {\r\n                    return {\r\n                        ...old[rowIndex],\r\n                        [columnId]: value,\r\n                    }\r\n                }\r\n                return row\r\n            })\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CssBaseline />\r\n            <EnhancedTable\r\n                columns={columns}\r\n                data={data}\r\n                setData={setData}\r\n                updateMyData={updateMyData}\r\n                skipPageReset={skipPageReset}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EventTable;\r\n","import React, {useRef, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Chip,\r\n    Divider, Grid,\r\n    Paper,\r\n    Slider,\r\n    TextField,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\nimport Page from \"../../components/Page\";\r\nimport {\r\n    Header,\r\n    AboutAuthor,\r\n    AboutProject,\r\n    Preferences,\r\n    ProjectCover,\r\n    ProjectDetails,\r\n    ProjectCalendar\r\n} from './components';\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\r\n\r\nimport moment from \"moment\";\r\nimport {DatePicker, KeyboardDatePicker} from \"@material-ui/pickers\";\r\nimport {Editor, EditorState, getDefaultKeyBinding, Modifier, RichUtils, convertToRaw} from \"draft-js\";\r\nimport {EditorToolbar} from \"../../components/RichEditor/components\";\r\nimport {blockRenderMap} from \"../../components/RichEditor/utils\";\r\n\r\nimport {addProject} from \"../../store/actions/projectActions\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nimport _ from 'lodash';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: theme.breakpoints.values.lg,\r\n        maxWidth: '100%',\r\n        margin: '0 auto',\r\n        padding: theme.spacing(3, 3, 6, 3)\r\n    },\r\n    aboutAuthor: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    projectCalendar: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    aboutProject: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    projectCover: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    projectDetails: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    preferences: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    actions: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    //about project\r\n    formGroup: {\r\n        marginBottom: theme.spacing(3),\r\n    },\r\n    formSlider: {\r\n        width: '220px'\r\n    },\r\n    fieldGroup: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    fieldHint: {\r\n        margin: theme.spacing(1, 0)\r\n    },\r\n    tags: {\r\n        marginTop: theme.spacing(1),\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(1)\r\n        }\r\n    },\r\n    flexGrow: {\r\n        flexGrow: 1\r\n    },\r\n    dateField: {\r\n        '& + &': {\r\n            marginLeft: theme.spacing(2)\r\n        }\r\n    },\r\n    addButton: {\r\n        marginBottom: theme.spacing(3),\r\n        marginLeft: theme.spacing(1)\r\n    },\r\n\r\n    //project details\r\n    editorContainer: {\r\n        padding: theme.spacing(2),\r\n        minHeight: 250,\r\n        '& .public-DraftEditorPlaceholder-root': {\r\n            ...theme.typography.body2\r\n        },\r\n        '& .public-DraftEditorPlaceholder-hasFocus': {\r\n            display: 'none'\r\n        },\r\n        '& .public-DraftEditor-content': {\r\n            '& p': {\r\n                ...theme.typography.body1\r\n            },\r\n            '& h1': {\r\n                ...theme.typography.h1\r\n            },\r\n            '& h2': {\r\n                ...theme.typography.h2\r\n            },\r\n            '& h3': {\r\n                ...theme.typography.h3\r\n            },\r\n            '& h4': {\r\n                ...theme.typography.h4\r\n            },\r\n            '& h5': {\r\n                ...theme.typography.h5\r\n            },\r\n            '& h6': {\r\n                ...theme.typography.h6\r\n            },\r\n            '& blockquote': {\r\n                ...theme.typography.subtitle1\r\n            },\r\n            '& ul': {\r\n                ...theme.typography.body1,\r\n                marginLeft: theme.spacing(4)\r\n            },\r\n            '& ol': {\r\n                ...theme.typography.body1,\r\n                marginLeft: theme.spacing(4)\r\n            },\r\n            '& pre': {\r\n                backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n                fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n                fontSize: 16,\r\n                padding: 2\r\n            }\r\n        }\r\n    },\r\n    textAlignLeft: {\r\n        textAlign: 'left'\r\n    },\r\n    textAlignCenter: {\r\n        textAlign: 'center'\r\n    },\r\n    textAlignRight: {\r\n        textAlign: 'right'\r\n    },\r\n    textAlignJustify: {\r\n        textAlign: 'justify'\r\n    }\r\n}));\r\n\r\nconst ProjectCreate = () => {\r\n    const classes = useStyles();\r\n\r\n    // const [project, setProject] = useState({\r\n    //     title: \"\",\r\n    //     description: \"\",\r\n    //     tags: [],\r\n    //     startDate: \"\",\r\n    //     endDate: \"\",\r\n    //     difficult: \"\",\r\n    // });\r\n\r\n    //project details\r\n    const capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\n    const editorRef = useRef(null);\r\n\r\n    const [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n    const handleContainerClick = () => {\r\n        editorRef.current.focus();\r\n    };\r\n\r\n    const handleToolbarToggle = (type, value) => {\r\n        if (type === 'blockType') {\r\n            if (['left', 'center', 'right', 'justify'].includes(value)) {\r\n                const newContentState = Modifier.setBlockData(\r\n                    editorState.getCurrentContent(),\r\n                    editorState.getSelection(),\r\n                    {'text-align': value}\r\n                );\r\n                const newEditorState = EditorState.push(\r\n                    editorState,\r\n                    newContentState,\r\n                    'change-block-data'\r\n                );\r\n                setEditorState(newEditorState);\r\n                return;\r\n            }\r\n            setEditorState(RichUtils.toggleBlockType(editorState, value));\r\n        } else {\r\n            setEditorState(RichUtils.toggleInlineStyle(editorState, value));\r\n        }\r\n    };\r\n\r\n    const handleEditorChange = editorState => {\r\n        setEditorState(editorState);\r\n    };\r\n\r\n    const handleKeyCommand = (command, editorState) => {\r\n        const newState = RichUtils.handleKeyCommand(editorState, command);\r\n        if (newState) {\r\n            handleEditorChange(newState);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const mapKeyToEditorCommand = event => {\r\n        if (event.keyCode === 9) {\r\n            const newEditorState = RichUtils.onTab(event, editorState, 4);\r\n            if (newEditorState !== editorState) {\r\n                handleEditorChange(newEditorState);\r\n            }\r\n            return;\r\n        }\r\n        return getDefaultKeyBinding(event);\r\n    };\r\n\r\n    function blockStyleFn(contentBlock) {\r\n        const textAlign = contentBlock.getData().get('text-align');\r\n        if (textAlign) {\r\n            const className = `textAlign${capitalize(textAlign)}`;\r\n            return classes[className];\r\n        }\r\n        return '';\r\n    }\r\n\r\n    //about project\r\n\r\n    // const initialValues = {\r\n    //     tag: '',\r\n    //     tags: [],\r\n    // };\r\n    // const [values, setValues] = useState({...initialValues});\r\n    //const [calendarTrigger, setCalendarTrigger] = useState(null);\r\n    // const [selectedStartDate, setSelectedStartDate] = useState(moment.now());\r\n    // const handleStartDateChange = (date) => {\r\n    //     setSelectedStartDate(date);\r\n    // };\r\n    //\r\n    // const [selectedEndDate, setSelectedEndDate] = useState(moment.now());\r\n    // const handleEndDateChange = (date) => {\r\n    //     setSelectedEndDate(date);\r\n    // };\r\n    // const handleCalendarOpen = trigger => {\r\n    //     setCalendarTrigger(trigger);\r\n    // };\r\n    // const handleCalendarChange = () => {\r\n    // };\r\n    // const handleCalendarAccept = date => {\r\n    //     setValues(values => ({\r\n    //         ...values,\r\n    //         [calendarTrigger]: date\r\n    //     }));\r\n    // };\r\n    //\r\n    // const handleCalendarClose = () => {\r\n    //     setCalendarTrigger(false);\r\n    // };\r\n    //\r\n    // const calendarOpen = Boolean(calendarTrigger);\r\n    // const calendarMinDate =\r\n    //     calendarTrigger === 'startDate'\r\n    //         ? moment()\r\n    //         : moment(values.startDate).add(1, 'day');\r\n    // const calendarValue = values[calendarTrigger];\r\n    //Заворачиваем все в newProject и отправляем в аддПроджект и дальше на сервак\r\n    // const contentState = editorState.getCurrentContent();\r\n    // console.log('content state', convertToRaw(contentState));\r\n\r\n    const handleFieldChange = (event, field, value) => {\r\n        event.persist && event.persist();\r\n        setProject(project => ({\r\n            ...project,\r\n            [field]: value\r\n        }));\r\n    };\r\n\r\n    const handleTagAdd = () => {\r\n        setProject(project => {\r\n            const newValues = {...project};\r\n            if (newValues.tag && !newValues.tags.text.includes(newValues.tag)) {\r\n                newValues.tags.text = [...newValues.tags.text];\r\n                newValues.tags.text.push(newValues.tag);\r\n            }\r\n            newValues.tag = '';\r\n            return newValues;\r\n        });\r\n    };\r\n\r\n    const handleTagDelete = tag => {\r\n        setProject(project => {\r\n            const newValues = {...project};\r\n            newValues.tags.text = newValues.tags.text.filter(t => t !== tag);\r\n            return newValues;\r\n        });\r\n    };\r\n\r\n    const [slider, setSlider] = useState([1]);\r\n    const handleChange = (event, newValue) => {\r\n        setSlider(newValue);\r\n    };\r\n\r\n    const [project, setProject] = useState({\r\n        title: '',\r\n        tag: '',\r\n        tags: {\r\n            text: ['Тренировка', 'Диета'],\r\n        },\r\n        startDate: '',\r\n        endDate: ''\r\n    });\r\n\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newProject = {\r\n            ...project,\r\n            difficult: _.toNumber(slider),\r\n            description: JSON.stringify(convertToRaw(editorState.getCurrentContent())),\r\n            date: new Date()\r\n        }\r\n        delete newProject.tag\r\n\r\n        dispatch(addProject(newProject));\r\n    };\r\n\r\n    return (\r\n        <Page\r\n            className={classes.root}\r\n            title=\"Создать проект\"\r\n        >\r\n            <Header/>\r\n            <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                <div className={classes.aboutProject}>\r\n                    <Card>\r\n                        <CardHeader title=\"О проекте\"/>\r\n                        <CardContent>\r\n                            <div className={classes.formGroup}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Название\"\r\n                                    helperText=\"Придумайте название для проекта\"\r\n                                    value={project.title}\r\n                                    onChange = {(e) => setProject(\r\n                                        {...project, title: e.target.value})}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </div>\r\n                            <div className={classes.formGroup}>\r\n                                <div className={classes.fieldGroup}>\r\n                                    <TextField\r\n                                        className={classes.flexGrow}\r\n                                        label=\"Теги\"\r\n                                        helperText=\"Придумайте теги для поиска\"\r\n                                        name=\"tag\"\r\n                                        onChange={event =>\r\n                                            handleFieldChange(event, 'tag', event.target.value)\r\n                                        }\r\n                                        value={project.tag}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    <Button\r\n                                        className={classes.addButton}\r\n                                        onClick={handleTagAdd}\r\n                                        size=\"small\"\r\n                                    >\r\n                                        <AddIcon/>\r\n                                        Добавить\r\n                                    </Button>\r\n                                </div>\r\n                                <Typography\r\n                                    className={classes.fieldHint}\r\n                                    variant=\"body2\"\r\n                                >\r\n                                    Теги для поиска:\r\n                                </Typography>\r\n                                <div className={classes.tags}>\r\n                                    {project.tags.text.map(tag => (\r\n                                        <Chip\r\n                                            deleteIcon={<CloseIcon/>}\r\n                                            key={tag}\r\n                                            label={tag}\r\n                                            onDelete={() => handleTagDelete(tag)}\r\n                                        />\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.formGroup}>\r\n                                <div className={classes.fieldGroup}>\r\n                                    <TextField\r\n                                        id=\"startDate\"\r\n                                        label=\"Начало проекта\"\r\n                                        type=\"date\"\r\n                                        className={classes.dateField}\r\n                                        defaultValue={Date.now()}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        value={project.startDate}\r\n                                        onChange={(e) => setProject({\r\n                                            ...project, startDate: e.target.value })\r\n                                        }\r\n                                    />\r\n                                    <TextField\r\n                                        id=\"endDate\"\r\n                                        label=\"Начало проекта\"\r\n                                        type=\"date\"\r\n                                        className={classes.dateField}\r\n                                        defaultValue={Date.now()}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        value={project.endDate}\r\n                                        onChange={(e) => setProject({\r\n                                            ...project, endDate: e.target.value })\r\n                                        }\r\n                                    />\r\n                                    {/*<TextField*/}\r\n                                    {/*    className={classes.dateField}*/}\r\n                                    {/*    label=\"Начало проекта\"*/}\r\n                                    {/*    name=\"startDate\"*/}\r\n                                    {/*    onClick={() => handleCalendarOpen('startDate')}*/}\r\n                                    {/*    value={moment(values.startDate).format('DD/MM/yyyy')}*/}\r\n                                    {/*    variant=\"outlined\"*/}\r\n                                    {/*/>*/}\r\n                                    {/*<TextField*/}\r\n                                    {/*    className={classes.dateField}*/}\r\n                                    {/*    label=\"Конец проекта\"*/}\r\n                                    {/*    name=\"endDate\"*/}\r\n                                    {/*    onClick={() => handleCalendarOpen('endDate')}*/}\r\n                                    {/*    value={moment(values.endDate).format('DD/MM/yyyy')}*/}\r\n                                    {/*    variant=\"outlined\"*/}\r\n                                    {/*/>*/}\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.formSlider}>\r\n                                <Typography id=\"slider\" gutterBottom>\r\n                                    Сложность\r\n                                </Typography>\r\n                                <Slider\r\n                                    value={slider}\r\n                                    onChange={handleChange}\r\n                                    aria-labelledby=\"slider\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={10}\r\n                                />\r\n                            </div>\r\n                        </CardContent>\r\n                        {/*<DatePicker*/}\r\n                        {/*    cancelLabel=\"отмена\"*/}\r\n                        {/*    minDate={calendarMinDate}*/}\r\n                        {/*    onAccept={handleCalendarAccept}*/}\r\n                        {/*    onChange={handleCalendarChange}*/}\r\n                        {/*    onClose={handleCalendarClose}*/}\r\n                        {/*    open={calendarOpen}*/}\r\n                        {/*    style={{display: 'none'}}*/}\r\n                        {/*    value={calendarValue}*/}\r\n                        {/*    variant=\"dialog\"*/}\r\n                        {/*/>*/}\r\n                    </Card>\r\n                </div>\r\n                <div className={classes.projectDetails}>\r\n                    <Card>\r\n                        <CardHeader title=\"Детали проекта\"/>\r\n                        <CardContent>\r\n                            <Paper>\r\n                                <EditorToolbar\r\n                                    editorState={editorState}\r\n                                    onToggle={handleToolbarToggle}\r\n                                />\r\n                                <Divider/>\r\n                                <div\r\n                                    className={classes.editorContainer}\r\n                                    onClick={handleContainerClick}\r\n                                >\r\n                                    <Editor\r\n                                        blockRenderMap={blockRenderMap}\r\n                                        blockStyleFn={blockStyleFn}\r\n                                        editorState={editorState}\r\n                                        handleKeyCommand={handleKeyCommand}\r\n                                        keyBindingFn={mapKeyToEditorCommand}\r\n                                        onChange={handleEditorChange}\r\n                                        placeholder=\"Опишите детали проекта...\"\r\n                                        ref={editorRef}\r\n                                        spellCheck\r\n                                    />\r\n                                </div>\r\n                            </Paper>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n                {/*<AboutProject className={classes.aboutProject}/>*/}\r\n                {/*<ProjectDetails className={classes.projectDetails}/>*/}\r\n                {/*<AboutAuthor className={classes.aboutAuthor}/>*/}\r\n                {/*<ProjectCalendar className={classes.projectCalendar}/>*/}\r\n                {/*<ProjectCover className={classes.projectCover}/>*/}\r\n                {/*<Preferences className={classes.preferences}/>*/}\r\n                <div className={classes.actions}>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Создать проект\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default ProjectCreate;\r\n","/* eslint-disable react/no-multi-comp */\r\nimport React from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Tooltip, Button} from '@material-ui/core';\r\nimport {fade} from '@material-ui/core/styles/colorManipulator';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatUnderlined from '@material-ui/icons/FormatUnderlined';\r\nimport FormatQuoteIcon from '@material-ui/icons/FormatQuote';\r\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\r\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\r\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\r\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    root: {},\r\n    inner: {\r\n        padding: theme.spacing(1),\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\nconst useStyles2 = makeStyles(theme => ({\r\n    button: {\r\n        padding: 0,\r\n        width: 32,\r\n        height: 32,\r\n        minWidth: 32,\r\n        color: theme.palette.icon,\r\n        '& + &': {\r\n            marginLeft: theme.spacing(1)\r\n        }\r\n    },\r\n    activeButton: {\r\n        backgroundColor: fade(theme.palette.primary.main, 0.1),\r\n        color: theme.palette.primary.main\r\n    }\r\n}));\r\n\r\nconst BLOCK_TYPES = [\r\n    {\r\n        blockType: 'header-one',\r\n        tooltip: 'Заголовок 1',\r\n        text: 'H1'\r\n    },\r\n    {\r\n        blockType: 'header-two',\r\n        tooltip: 'Заголовок 2',\r\n        text: 'H2'\r\n    },\r\n    {\r\n        blockType: 'header-three',\r\n        tooltip: 'Заголовок 3',\r\n        text: 'H3'\r\n    },\r\n    {\r\n        blockType: 'header-four',\r\n        tooltip: 'Заголовок 4',\r\n        text: 'H4'\r\n    },\r\n    {\r\n        blockType: 'header-five',\r\n        tooltip: 'Заголовок 5',\r\n        text: 'H5'\r\n    },\r\n    {\r\n        blockType: 'header-six',\r\n        tooltip: 'Заголовок 6',\r\n        text: 'H6'\r\n    },\r\n    {\r\n        blockType: 'blockquote',\r\n        tooltip: 'Цитата',\r\n        icon: FormatQuoteIcon\r\n    },\r\n    {\r\n        blockType: 'unordered-list-item',\r\n        tooltip: 'Неупорядоченный список',\r\n        icon: FormatListBulletedIcon\r\n    },\r\n    {\r\n        blockType: 'ordered-list-item',\r\n        tooltip: 'Упорядоченный список',\r\n        icon: FormatListNumberedIcon\r\n    },\r\n    {\r\n        blockType: 'code-block',\r\n        tooltip: 'Блок кода',\r\n        icon: CodeIcon\r\n    },\r\n    // {\r\n    //     blockType: 'left',\r\n    //     tooltip: 'Выровнять по левому краю',\r\n    //     icon: FormatAlignLeftIcon\r\n    // },\r\n    // {\r\n    //     blockType: 'center',\r\n    //     tooltip: 'Выровнять по центру',\r\n    //     icon: FormatAlignCenterIcon\r\n    // },\r\n    // {\r\n    //     blockType: 'right',\r\n    //     tooltip: 'Выровнять по правому краю',\r\n    //     icon: FormatAlignRightIcon\r\n    // },\r\n    // {\r\n    //     blockType: 'justify',\r\n    //     tooltip: 'Выровнять по ширине',\r\n    //     icon: FormatAlignJustifyIcon\r\n    // }\r\n];\r\n\r\nconst INLINE_STYLES = [\r\n    {\r\n        inlineStyle: 'BOLD',\r\n        tooltip: 'Жирный',\r\n        icon: FormatBoldIcon\r\n    },\r\n    {\r\n        inlineStyle: 'ITALIC',\r\n        tooltip: 'Курсив',\r\n        icon: FormatItalicIcon\r\n    },\r\n    {\r\n        inlineStyle: 'UNDERLINE',\r\n        tooltip: 'Подчеркивание',\r\n        icon: FormatUnderlined\r\n    },\r\n    {\r\n        inlineStyle: 'CODE',\r\n        tooltip: 'Моноширинный',\r\n        icon: CodeIcon\r\n    }\r\n];\r\n\r\nconst ButtonBase = props => {\r\n    const {active, tooltip, children, ...rest} = props;\r\n\r\n    const classes = useStyles2();\r\n\r\n    return (\r\n        <Tooltip title={tooltip}>\r\n            <Button\r\n                {...rest}\r\n                className={clsx(classes.button, {\r\n                    [classes.activeButton]: active\r\n                })}\r\n            >\r\n                {children}\r\n            </Button>\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\n\r\nconst BlockTypeButtons = props => {\r\n    const {editorState, onToggle} = props;\r\n\r\n    const handleClick = (event, blockType) => {\r\n        event.preventDefault();\r\n\r\n        onToggle('blockType', blockType);\r\n    };\r\n\r\n    const selection = editorState.getSelection();\r\n    const blockType = editorState\r\n        .getCurrentContent()\r\n        .getBlockForKey(selection.getStartKey())\r\n        .getType();\r\n    const blockData = editorState\r\n        .getCurrentContent()\r\n        .getBlockForKey(selection.getStartKey())\r\n        .getData();\r\n\r\n    return (\r\n        <>\r\n            {BLOCK_TYPES.map(button => {\r\n                let active = false;\r\n\r\n                if (['left', 'center', 'right', 'justify'].includes(button.blockType)) {\r\n                    active = blockData.get('text-align') === button.blockType;\r\n                } else {\r\n                    active = button.blockType === blockType;\r\n                }\r\n\r\n                return (\r\n                    <ButtonBase\r\n                        active={active}\r\n                        key={button.blockType}\r\n                        onClick={event => handleClick(event, button.blockType)}\r\n                        tooltip={button.tooltip}\r\n                    >\r\n                        {button.icon ? <button.icon/> : button.text}\r\n                    </ButtonBase>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nconst InlineStyleButtons = props => {\r\n    const {editorState, onToggle} = props;\r\n\r\n    const handleClick = (event, inlineStyle) => {\r\n        event.preventDefault();\r\n        onToggle('inlineStyle', inlineStyle);\r\n    };\r\n\r\n    const currentStyle = editorState.getCurrentInlineStyle();\r\n\r\n    return (\r\n        <>\r\n            {INLINE_STYLES.map(button => (\r\n                <ButtonBase\r\n                    active={currentStyle.has(button.inlineStyle)}\r\n                    key={button.inlineStyle}\r\n                    onClick={event => handleClick(event, button.inlineStyle)}\r\n                    tooltip={button.tooltip}\r\n                >\r\n                    {button.icon ? <button.icon/> : button.text}\r\n                </ButtonBase>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst EditorToolbar = props => {\r\n    const {editorState, onToggle, className, ...rest} = props;\r\n\r\n    const classes = useStyles1();\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <PerfectScrollbar>\r\n                <div className={classes.inner}>\r\n                    <BlockTypeButtons\r\n                        editorState={editorState}\r\n                        onToggle={onToggle}\r\n                    />\r\n                    <InlineStyleButtons\r\n                        editorState={editorState}\r\n                        onToggle={onToggle}\r\n                    />\r\n                </div>\r\n            </PerfectScrollbar>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default EditorToolbar;\r\n","import { Map } from 'immutable';\r\nimport { EditorState, DefaultDraftBlockRenderMap, Modifier } from 'draft-js';\r\n\r\nexport function setBlockData(editorState, data) {\r\n  const newContentState = Modifier.setBlockData(\r\n    editorState.getCurrentContent(),\r\n    editorState.getSelection(),\r\n    data\r\n  );\r\n\r\n  return EditorState.push(editorState, newContentState, 'change-block-data');\r\n}\r\n\r\nconst newBlockRenderMap = Map({\r\n  unstyled: {\r\n    element: 'p'\r\n  },\r\n  paragraph: {\r\n    element: 'p'\r\n  }\r\n});\r\n\r\n// TODO:\r\n// 1. DraftJS uses 'div' tags inside every block.\r\n//    When we use 'p' tag for paragraphs, we get a warning because \"div\" tag cannot be inside a \"p\" tag.\r\n\r\nexport const blockRenderMap = DefaultDraftBlockRenderMap.merge(\r\n  newBlockRenderMap\r\n);\r\n","export default (bytes, decimals = 2) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n\r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n};\r\n","import React, {Fragment, useState, useCallback} from 'react';\r\nimport clsx from 'clsx';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {useDropzone} from 'react-dropzone';\r\n// import PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Button,\r\n    IconButton,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    Tooltip,\r\n    colors\r\n} from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport bytesToSize from \"../../utils/bytesToSize\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {},\r\n    dropZone: {\r\n        border: `1px dashed ${theme.palette.divider}`,\r\n        padding: theme.spacing(6),\r\n        outline: 'none',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n        '&:hover': {\r\n            backgroundColor: colors.grey[50],\r\n            opacity: 0.5,\r\n            cursor: 'pointer'\r\n        }\r\n    },\r\n    dragActive: {\r\n        backgroundColor: colors.grey[50],\r\n        opacity: 0.5\r\n    },\r\n    image: {\r\n        width: 130\r\n    },\r\n    info: {\r\n        marginTop: theme.spacing(1)\r\n    },\r\n    list: {\r\n        maxHeight: 320\r\n    },\r\n    actions: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2)\r\n        }\r\n    }\r\n}));\r\n\r\nconst FilesDropzone = props => {\r\n    const {className, ...rest} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [files, setFiles] = useState([]);\r\n\r\n    const handleDrop = useCallback(acceptedFiles => {\r\n        setFiles(files => [...files].concat(acceptedFiles));\r\n    }, []);\r\n\r\n    const handleRemoveAll = () => {\r\n        setFiles([]);\r\n    };\r\n\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <div\r\n                className={clsx({\r\n                    [classes.dropZone]: true,\r\n                    [classes.dragActive]: isDragActive\r\n                })}\r\n                {...getRootProps()}\r\n            >\r\n                <input {...getInputProps()} />\r\n                <div>\r\n                    <img\r\n                        alt=\"Загрузить файлы\"\r\n                        className={classes.image}\r\n                        src=\"/images/undraw_add_file2_gvbb.svg\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Typography\r\n                        gutterBottom\r\n                        variant=\"h3\"\r\n                    >\r\n                        Загрузить файлы\r\n                    </Typography>\r\n                    <Typography\r\n                        className={classes.info}\r\n                        color=\"textSecondary\"\r\n                        variant=\"body1\"\r\n                    >\r\n                        Перетащите файлы сюда или нажмите на <Link underline=\"always\">ссылку</Link>{' '}\r\n                        для загрузки\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n            {files.length > 0 && (\r\n                <>\r\n                    <List className={classes.list}>\r\n                        {files.map((file, i) => (\r\n                            <ListItem\r\n                                divider={i < files.length - 1}\r\n                                key={uuidv4()}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <FileCopyIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary={file.name}\r\n                                    primaryTypographyProps={{variant: 'h5'}}\r\n                                    secondary={bytesToSize(file.size)}\r\n                                />\r\n                                <Tooltip title=\"More options\">\r\n                                    <IconButton edge=\"end\">\r\n                                        <MoreIcon/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    <div className={classes.actions}>\r\n                        <Button\r\n                            onClick={handleRemoveAll}\r\n                            size=\"small\"\r\n                        >\r\n                            Remove all\r\n                        </Button>\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                        >\r\n                            Upload files\r\n                        </Button>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default FilesDropzone;\r\n"],"sourceRoot":""}